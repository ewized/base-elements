{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/lit-html/lib/template.js","webpack:///./node_modules/lit-html/lib/parts.js","webpack:///./node_modules/lit-html/lib/template-result.js","webpack:///./node_modules/lit-html/lib/template-instance.js","webpack:///./node_modules/css-loader/dist/runtime/api.js","webpack:///./node_modules/lit-html/lib/modify-template.js","webpack:///./node_modules/lit-html/lib/shady-render.js","webpack:///./node_modules/lit-element/lib/updating-element.js","webpack:///./node_modules/lit-element/lib/decorators.js","webpack:///./node_modules/lit-element/lib/css-tag.js","webpack:///./node_modules/lit-element/lit-element.js","webpack:///./node_modules/lit-html/lib/part.js","webpack:///./node_modules/lit-html/lib/default-template-processor.js","webpack:///./node_modules/lit-html/lit-html.js","webpack:///./src/components/preformat/preformat.scss","webpack:///./node_modules/lit-html/lib/dom.js","webpack:///./src/components/preformat/preformat.ts","webpack:///./src/components/preformat/index.ts","webpack:///./src/utils.ts","webpack:///./node_modules/lit-html/lib/template-factory.js","webpack:///./node_modules/lit-html/lib/directive.js","webpack:///./node_modules/lit-html/lib/render.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","boundAttributeSuffix","Template","result","element","this","parts","nodesToRemove","stack","walker","document","createTreeWalker","content","lastPartIndex","index","partIndex","strings","values","length","node","nextNode","nodeType","hasAttributes","attributes","count","endsWith","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","removeAttribute","statics","split","push","type","tagName","currentNode","data","indexOf","parent","parentNode","lastIndex","insert","createMarker","match","createTextNode","insertBefore","previousSibling","nextSibling","pop","removeChild","str","suffix","isTemplatePartActive","part","createComment","isPrimitive","isIterable","Array","isArray","iterator","AttributeCommitter","dirty","_createPart","AttributePart","text","undefined","v","setAttribute","_getValue","committer","directive","commit","NodePart","options","__pendingValue","container","startNode","appendChild","endNode","ref","__insert","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","valueAsString","template","templateFactory","update","instance","processor","fragment","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","setValue","BooleanAttributePart","Error","PropertyCommitter","super","single","PropertyPart","eventOptionsSupported","window","addEventListener","removeEventListener","_e","EventPart","eventName","eventContext","__boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","capture","once","passive","shouldAddListener","__options","getOptions","event","commentMarker","TemplateResult","html","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","createElement","innerHTML","getHTML","SVGTemplateResult","getTemplateElement","svgElement","firstChild","TemplateInstance","__parts","cloneNode","importNode","nodeIndex","nodeName","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","customElements","upgrade","useSourceMap","list","toString","map","cssMapping","btoa","sourceMapping","sourceMap","base64","unescape","encodeURIComponent","JSON","stringify","concat","sourceURLs","sources","source","sourceRoot","join","cssWithMappingToString","mediaQuery","alreadyImportedModules","id","_i","walkerNodeFilter","removeNodesFromTemplate","nextActiveIndexInTemplateParts","removeCount","nodesToRemoveInTemplate","currentRemovingNode","has","forEach","countNodes","startIndex","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","shadyTemplateFactory","cacheKey","templateCache","stringsArray","WeakMap","keyString","Map","set","TEMPLATE_TYPES","shadyRenderSet","Set","prepareTemplateStyles","renderedDOM","add","templateElement","styles","querySelectorAll","condensedStyle","style","textContent","templates","from","removeStylesFromLitTemplates","refNode","insertCount","walkerIndex","insertNodeIntoTemplate","querySelector","nativeShadow","removes","JSCompiler_renameProperty","prop","_obj","defaultConverter","Boolean","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","converter","reflect","hasChanged","microtaskPromise","Promise","resolve","STATE_HAS_UPDATED","STATE_UPDATE_REQUESTED","STATE_IS_REFLECTING_TO_ATTRIBUTE","STATE_IS_REFLECTING_TO_PROPERTY","STATE_HAS_CONNECTED","finalized","UpdatingElement","HTMLElement","_updateState","_instanceProperties","_updatePromise","_hasConnectedResolver","_changedProperties","_reflectingProperties","initialize","finalize","_classProperties","attr","_attributeNameForProperty","_attributeToPropertyMap","superProperties","getPrototypeOf","k","_ensureClassProperties","noAccessor","oldValue","_requestUpdate","configurable","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","fromAttribute","toAttribute","_saveInstanceProperties","constructor","_v","_attributeToProperty","ctor","attrValue","_propertyValueToAttribute","propName","_propertyValueFromAttribute","shouldRequestUpdate","_valueHasChanged","_hasRequestedUpdate","_enqueueUpdate","updateComplete","reject","previousUpdatePromise","res","rej","_hasConnected","performUpdate","_applyInstanceProperties","shouldUpdate","changedProperties","_markUpdated","firstUpdated","updated","_getUpdateComplete","size","_propertyToAttribute","customElement","classOrDescriptor","clazz","define","legacyCustomElement","descriptor","kind","elements","standardCustomElement","standardProperty","placement","initializer","assign","legacyProperty","proto","protoOrDescriptor","query","selector","renderRoot","legacyQuery","standardQuery","supportsAdoptingStyleSheets","Document","CSSStyleSheet","constructionToken","CSSResult","cssText","safeToken","_styleSheet","replaceSync","unsafeCSS","css","reduce","acc","idx","textFromCSSResult","flattenStyles","flat","Infinity","arrayFlat","_styles","_getUniqueStyles","userStyles","reduceRight","unshift","createRenderRoot","ShadowRoot","adoptStyles","attachShadow","adoptedStyleSheets","styleSheet","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","localName","connectedCallback","hasUpdated","styleElement","templateResult","render","hasRendered","needsScoping","host","firstScopeRender","renderContainer","createDocumentFragment","delete","noChange","nothing","defaultTemplateProcessor","prefix","isCEPolyfill","polyfillWrapFlushCallback","reparentNodes","start","end","before","removeNodes","notNull","message","script","async","truthy","src","registry","extends","templateCaches","directives","f","args","isDirective","appendInto"],"mappings":"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","file":"components/preformat/index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 55);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // tslint:disable-next-line:no-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        // If `value` isn't already a string, we explicitly convert it here in case\n        // it can't be implicitly converted - i.e. it's a symbol.\n        const valueAsString = typeof value === 'string' ? value : String(value);\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = valueAsString;\n        }\n        else {\n            this.__commitNode(document.createTextNode(valueAsString));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\nconst commentMarker = ` ${marker} `;\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment poisition.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceeding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceeding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (useSourceMap) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return \"@media \".concat(item[2], \"{\").concat(content, \"}\");\n      }\n\n      return content;\n    }).join('');\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery) {\n    if (typeof modules === 'string') {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, '']];\n    }\n\n    var alreadyImportedModules = {};\n\n    for (var i = 0; i < this.length; i++) {\n      // eslint-disable-next-line prefer-destructuring\n      var id = this[i][0];\n\n      if (id != null) {\n        alreadyImportedModules[id] = true;\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = modules[_i]; // skip already imported module\n      // this implementation is not 100% perfect for weird media query combinations\n      // when a module is imported multiple times with different media queries.\n      // I hope this will never occur (Hey this way we have smaller bundles)\n\n      if (item[0] == null || !alreadyImportedModules[item[0]]) {\n        if (mediaQuery && !item[2]) {\n          item[2] = mediaQuery;\n        } else if (mediaQuery) {\n          item[2] = \"(\".concat(item[2], \") and (\").concat(mediaQuery, \")\");\n        }\n\n        list.push(item);\n      }\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring\n\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap && typeof btoa === 'function') {\n    var sourceMapping = toComment(cssMapping);\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return \"/*# sourceURL=\".concat(cssMapping.sourceRoot).concat(source, \" */\");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n  }\n\n  return [content].join('\\n');\n} // Adapted from convert-source-map (MIT)\n\n\nfunction toComment(sourceMap) {\n  // eslint-disable-next-line no-undef\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n  return \"/*# \".concat(data, \" */\");\n}","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module shady-render\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected. ` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (scopeName, renderedDOM, template) => {\n    shadyRenderSet.add(scopeName);\n    // If `renderedDOM` is stamped from a Template, then we need to edit that\n    // Template's underlying template element. Otherwise, we create one here\n    // to give to ShadyCSS, which still requires one while scoping.\n    const templateElement = !!template ? template.element : document.createElement('template');\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    const { length } = styles;\n    // If there are no styles, skip unnecessary work\n    if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        //\n        // ShadyCSS will only update styles containing @apply in the template\n        // given to `prepareTemplateStyles`. If no lit Template was given,\n        // ShadyCSS will not be able to update uses of @apply in any relevant\n        // template. However, this is not a problem because we only create the\n        // template for the purpose of supporting `prepareAdoptedCssText`,\n        // which doesn't support @apply at all.\n        window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    const content = templateElement.content;\n    if (!!template) {\n        insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n    }\n    else {\n        content.insertBefore(condensedStyle, content.firstChild);\n    }\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n    const style = content.querySelector('style');\n    if (window.ShadyCSS.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else if (!!template) {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    if (!options || typeof options !== 'object' || !options.scopeName) {\n        throw new Error('The `scopeName` option is required.');\n    }\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = compatibleShadyCSSVersion &&\n        container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n        !!container.host;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)\n        // that should apply to `renderContainer` even if the rendered value is\n        // not a TemplateInstance. However, it will only insert scoped styles\n        // into the document if `prepareTemplateStyles` has already been called\n        // for the given scope name.\n        const template = part.value instanceof TemplateInstance ?\n            part.value.template :\n            undefined;\n        prepareTemplateStyles(scopeName, renderContainer, template);\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nvar _a;\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst microtaskPromise = Promise.resolve(true);\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\nconst STATE_HAS_CONNECTED = 1 << 5;\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        this._updatePromise = microtaskPromise;\n        this._hasConnectedResolver = undefined;\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        Object.defineProperty(this.prototype, name, {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                return this[key];\n            },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this._requestUpdate(name, oldValue);\n            },\n            configurable: true,\n            enumerable: true\n        });\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (!superCtor.hasOwnProperty(finalized)) {\n            superCtor.finalize();\n        }\n        this[finalized] = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._saveInstanceProperties();\n        // ensures first update will be caught by an early access of\n        // `updateComplete`\n        this._requestUpdate();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        this._updateState = this._updateState | STATE_HAS_CONNECTED;\n        // Ensure first connection completes an update. Updates cannot complete\n        // before connection and if one is pending connection the\n        // `_hasConnectionResolver` will exist. If so, resolve it to complete the\n        // update, otherwise requestUpdate.\n        if (this._hasConnectedResolver) {\n            this._hasConnectedResolver();\n            this._hasConnectedResolver = undefined;\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor._classProperties.get(propName) || defaultPropertyDeclaration;\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * This private version of `requestUpdate` does not access or return the\n     * `updateComplete` promise. This promise can be overridden and is therefore\n     * not free to access.\n     */\n    _requestUpdate(name, oldValue) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            const ctor = this.constructor;\n            const options = ctor._classProperties.get(name) || defaultPropertyDeclaration;\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                if (!this._changedProperties.has(name)) {\n                    this._changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it's important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._enqueueUpdate();\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        this._requestUpdate(name, oldValue);\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        // Mark state updating...\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        let resolve;\n        let reject;\n        const previousUpdatePromise = this._updatePromise;\n        this._updatePromise = new Promise((res, rej) => {\n            resolve = res;\n            reject = rej;\n        });\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await previousUpdatePromise;\n        }\n        catch (e) {\n            // Ignore any previous errors. We only care that the previous cycle is\n            // done. Any error should have been handled in the previous update.\n        }\n        // Make sure the element has connected before updating.\n        if (!this._hasConnected) {\n            await new Promise((res) => this._hasConnectedResolver = res);\n        }\n        try {\n            const result = this.performUpdate();\n            // If `performUpdate` returns a Promise, we await it. This is done to\n            // enable coordinating updates with a scheduler. Note, the result is\n            // checked to avoid delaying an additional microtask unless we need to.\n            if (result != null) {\n                await result;\n            }\n        }\n        catch (e) {\n            reject(e);\n        }\n        resolve(!this._hasRequestedUpdate);\n    }\n    get _hasConnected() {\n        return (this._updateState & STATE_HAS_CONNECTED);\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * You can override this method to change the timing of updates. If this\n     * method is overridden, `super.performUpdate()` must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.update(changedProperties);\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there's an\n            // update exception.\n            shouldUpdate = false;\n            throw e;\n        }\n        finally {\n            // Ensure element can accept additional updates after an exception.\n            this._markUpdated();\n        }\n        if (shouldUpdate) {\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update.\n     *\n     * To await additional asynchronous work, override the `_getUpdateComplete`\n     * method. For example, it is sometimes useful to await a rendered element\n     * before fulfilling this Promise. To do this, first await\n     * `super._getUpdateComplete()`, then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._getUpdateComplete();\n    }\n    /**\n     * Override point for the `updateComplete` promise.\n     *\n     * It is not safe to override the `updateComplete` getter directly due to a\n     * limitation in TypeScript which means it is not possible to call a\n     * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n     * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n     * This method should be overridden instead. For example:\n     *\n     *   class MyElement extends LitElement {\n     *     async _getUpdateComplete() {\n     *       await super._getUpdateComplete();\n     *       await this._myChild.updateComplete;\n     *     }\n     *   }\n     */\n    _getUpdateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n_a = finalized;\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement[_a] = true;\n//# sourceMappingURL=updating-element.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst legacyCustomElement = (tagName, clazz) => {\n    window.customElements.define(tagName, clazz);\n    // Cast as any because TS doesn't recognize the return type as being a\n    // subtype of the decorated class when clazz is typed as\n    // `Constructor<HTMLElement>` for some reason.\n    // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n    // applied to elements however.\n    // tslint:disable-next-line:no-any\n    return clazz;\n};\nconst standardCustomElement = (tagName, descriptor) => {\n    const { kind, elements } = descriptor;\n    return {\n        kind,\n        elements,\n        // This callback is called once the class is otherwise fully defined\n        finisher(clazz) {\n            window.customElements.define(tagName, clazz);\n        }\n    };\n};\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * @param tagName the name of the custom element to define\n */\nexport const customElement = (tagName) => (classOrDescriptor) => (typeof classOrDescriptor === 'function') ?\n    legacyCustomElement(tagName, classOrDescriptor) :\n    standardCustomElement(tagName, classOrDescriptor);\nconst standardProperty = (options, element) => {\n    // When decorating an accessor, pass it through and add property metadata.\n    // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n    // stomp over the user's accessor.\n    if (element.kind === 'method' && element.descriptor &&\n        !('value' in element.descriptor)) {\n        return Object.assign({}, element, { finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            } });\n    }\n    else {\n        // createProperty() takes care of defining the property, but we still\n        // must return some kind of descriptor, so return a descriptor for an\n        // unused prototype field. The finisher calls createProperty().\n        return {\n            kind: 'field',\n            key: Symbol(),\n            placement: 'own',\n            descriptor: {},\n            // When @babel/plugin-proposal-decorators implements initializers,\n            // do this instead of the initializer below. See:\n            // https://github.com/babel/babel/issues/9260 extras: [\n            //   {\n            //     kind: 'initializer',\n            //     placement: 'own',\n            //     initializer: descriptor.initializer,\n            //   }\n            // ],\n            initializer() {\n                if (typeof element.initializer === 'function') {\n                    this[element.key] = element.initializer.call(this);\n                }\n            },\n            finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            }\n        };\n    }\n};\nconst legacyProperty = (options, proto, name) => {\n    proto.constructor\n        .createProperty(name, options);\n};\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A `PropertyDeclaration` may optionally be\n * supplied to configure property features.\n *\n * @ExportDecoratedItems\n */\nexport function property(options) {\n    // tslint:disable-next-line:no-any decorator\n    return (protoOrDescriptor, name) => (name !== undefined) ?\n        legacyProperty(options, protoOrDescriptor, name) :\n        standardProperty(options, protoOrDescriptor);\n}\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function query(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelector(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function queryAll(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelectorAll(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\nconst legacyQuery = (descriptor, proto, name) => {\n    Object.defineProperty(proto, name, descriptor);\n};\nconst standardQuery = (descriptor, element) => ({\n    kind: 'method',\n    placement: 'prototype',\n    key: element.key,\n    descriptor,\n});\nconst standardEventOptions = (options, element) => {\n    return Object.assign({}, element, { finisher(clazz) {\n            Object.assign(clazz.prototype[element.key], options);\n        } });\n};\nconst legacyEventOptions = \n// tslint:disable-next-line:no-any legacy decorator\n(options, proto, name) => {\n    Object.assign(proto[name], options);\n};\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifis event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n *\n *     class MyElement {\n *\n *       clicked = false;\n *\n *       render() {\n *         return html`<div @click=${this._onClick}`><button></button></div>`;\n *       }\n *\n *       @eventOptions({capture: true})\n *       _onClick(e) {\n *         this.clicked = true;\n *       }\n *     }\n */\nexport const eventOptions = (options) => \n// Return value typed as any to prevent TypeScript from complaining that\n// standard decorator function signature does not match TypeScript decorator\n// signature\n// TODO(kschaaf): unclear why it was only failing on this decorator and not\n// the others\n((protoOrDescriptor, name) => (name !== undefined) ?\n    legacyEventOptions(options, protoOrDescriptor, name) :\n    standardEventOptions(options, protoOrDescriptor));\n//# sourceMappingURL=decorators.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nexport const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n            // is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else if (typeof value === 'number') {\n        return value;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateResult } from 'lit-html';\nimport { render } from 'lit-html/lib/shady-render.js';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html.js';\nimport { supportsAdoptingStyleSheets } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.2.1');\n/**\n * Minimal implementation of Array.prototype.flat\n * @param arr the array to flatten\n * @param result the accumlated result\n */\nfunction arrayFlat(styles, result = []) {\n    for (let i = 0, length = styles.length; i < length; i++) {\n        const value = styles[i];\n        if (Array.isArray(value)) {\n            arrayFlat(value, result);\n        }\n        else {\n            result.push(value);\n        }\n    }\n    return result;\n}\n/** Deeply flattens styles array. Uses native flat if available. */\nconst flattenStyles = (styles) => styles.flat ? styles.flat(Infinity) : arrayFlat(styles);\nexport class LitElement extends UpdatingElement {\n    /** @nocollapse */\n    static finalize() {\n        // The Closure JS Compiler does not always preserve the correct \"this\"\n        // when calling static super methods (b/137460243), so explicitly bind.\n        super.finalize.call(this);\n        // Prepare styling that is stamped at first render time. Styling\n        // is built from user provided `styles` or is inherited from the superclass.\n        this._styles =\n            this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ?\n                this._getUniqueStyles() :\n                this._styles || [];\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Take care not to call `this.styles` multiple times since this generates\n        // new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.styles;\n        const styles = [];\n        if (Array.isArray(userStyles)) {\n            const flatStyles = flattenStyles(userStyles);\n            // As a performance optimization to avoid duplicated styling that can\n            // occur especially when composing via subclassing, de-duplicate styles\n            // preserving the last item in the list. The last item is kept to\n            // try to preserve cascade order with the assumption that it's most\n            // important that last added styles override previous styles.\n            const styleSet = flatStyles.reduceRight((set, s) => {\n                set.add(s);\n                // on IE set.add does not return the set.\n                return set;\n            }, new Set());\n            // Array.from does not work on Set in IE\n            styleSet.forEach((v) => styles.unshift(v));\n        }\n        else if (userStyles) {\n            styles.push(userStyles);\n        }\n        return styles;\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.renderRoot =\n            this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the `static get styles`\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it.\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        super.update(changedProperties);\n        const templateResult = this.render();\n        if (templateResult instanceof TemplateResult) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     */\n    render() {\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n *\n * Note this property name is a string to prevent breaking Closure JS Compiler\n * optimizations. See updating-element.ts for more information.\n */\nLitElement['finalized'] = true;\n/**\n * Render method used to render the lit-html TemplateResult to the element's\n * DOM.\n * @param {TemplateResult} Template to render.\n * @param {Element|DocumentFragment} Node into which to render.\n * @param {String} Element name.\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.1.2');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \":host{word-wrap:normal;overflow:auto}:host{--preformat-border: var(--e-preformat-border, 1px solid #d3d3d3);--preformat-background: var(--e-preformat-background, #f1f1f1);position:relative;display:block;white-space:pre;padding:5px;margin:5px;font-family:monospace;font-size:12px;border:var(--preformat-border);background:var(--preformat-background)}\\n\", \"\"]);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","import { LitElement, html } from 'lit-element'\nimport { styles, customElement } from '../../utils'\nimport style from './preformat.scss'\n\n@customElement('e-preformat')\n@styles(style)\nexport default class Preformat extends LitElement {\n\n  render() {\n    return html`<slot></slot>`\n  }\n}\n","export { default as Preformat } from './preformat'\n","import { css, unsafeCSS, CSSResult } from 'lit-element'\nimport { directive, NodePart } from 'lit-html'\n\n/** Takes the import object for scss files and inject it into the custom element */\nexport const _styles = (style: Array<Array<string>>) => css`${unsafeCSS(style[0][1])}`\n\n/** Creates a decorator for the class */\nexport function styles(...styles: Array<any>) {\n  // this is the equalivant of doing in the class\n  // static styles = _styles(style)\n  return (descriptor: any) => {\n    Object.defineProperty(descriptor, 'styles', { value: styles.map(style => style instanceof CSSResult ? style : _styles(style)) })\n    // return {\n    //   ...descriptor,\n    //   elements: [ ...descriptor.elements, {\n    //     kind: 'field',\n    //     placement: 'static',\n    //     key: 'styles',\n    //     descriptor: {},\n    //     initializer: () => styles.map(style => style instanceof CSSResult ? style : _styles(style)),\n    //   }],\n    // }\n  }\n}\n\n/** Check if the value is null if so throw error with the message */\nexport const truthy = (value: any, message: string = 'The value was false') => {\n  if (!value) {\n    throw new Error(message)\n  }\n}\n\n/** Check if the value is null if so throw error with the message */\nexport const notNull = (value: any, message: string = 'The value was null') => {\n  if (value) {\n    return value\n  }\n  throw new Error(message)\n}\n\n/** Used to replate a sleep function in an async call used for debugging */\nexport const sleep = async (time: number) => new Promise(resolve => window.setTimeout(resolve, time))\n\n/** Create a script directive with the src value */\nexport const script = directive((value: string, async: boolean = false) => (part: any) => {\n  truthy(part instanceof NodePart, 'unsafeHTML can only be used in text bindings')\n  const script = document.createElement('script')\n  script.src = value\n  script.async = async\n  part.setValue(script)\n})\n\n/** Create the custom element once */\nexport const customElement = (name: string, options?: ElementDefinitionOptions | string) => (clazz: any) => {\n  const registry = window.customElements\n  // only define once\n  if (!registry.get(name)) {\n    //console.info(`registering <${name}>`)\n    if (typeof options === 'string') {\n      // short hand since there is only one option\n      registry.define(name, clazz, { extends: options })\n    } else {\n      registry.define(name, clazz, options)\n    }\n  }\n  return clazz\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map"],"sourceRoot":""}