{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/lit-html/lib/template.js","webpack:///./node_modules/lit-html/lib/parts.js","webpack:///./node_modules/lit-html/lib/part.js","webpack:///./node_modules/lit-html/lib/modify-template.js","webpack:///./node_modules/lit-html/lib/shady-render.js","webpack:///./node_modules/lit-element/lib/updating-element.js","webpack:///./node_modules/lit-element/lib/decorators.js","webpack:///./node_modules/lit-element/lib/css-tag.js","webpack:///./node_modules/lit-element/lit-element.js","webpack:///./node_modules/lit-html/lib/default-template-processor.js","webpack:///./node_modules/lit-html/lit-html.js","webpack:///./node_modules/lit-html/lib/dom.js","webpack:///./src/utils.ts","webpack:///./node_modules/lit-html/lib/template-factory.js","webpack:///./node_modules/lit-html/lib/directive.js","webpack:///./node_modules/lit-html/lib/render.js","webpack:///./node_modules/lit-html/lib/template-result.js","webpack:///./node_modules/lit-html/lib/template-instance.js","webpack:///./node_modules/css-loader/dist/runtime/api.js","webpack:///./node_modules/lit-html/directives/unsafe-html.js","webpack:///./src/components/code/code.scss","webpack:///./src/components/code/code.ts","webpack:///./src/components/code/index.ts","webpack:///./node_modules/code-prettify/src/prettify.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","boundAttributeSuffix","Template","result","element","this","parts","nodesToRemove","stack","walker","document","createTreeWalker","content","lastPartIndex","index","partIndex","strings","values","length","node","nextNode","nodeType","hasAttributes","attributes","count","endsWith","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","removeAttribute","statics","split","push","type","tagName","currentNode","data","indexOf","parent","parentNode","lastIndex","insert","createMarker","match","createTextNode","insertBefore","previousSibling","nextSibling","pop","removeChild","str","suffix","isTemplatePartActive","part","createComment","isPrimitive","isIterable","Array","isArray","iterator","AttributeCommitter","dirty","_createPart","AttributePart","text","undefined","v","setAttribute","_getValue","committer","directive","commit","NodePart","options","__pendingValue","container","startNode","appendChild","endNode","ref","__insert","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","valueAsString","template","templateFactory","update","instance","processor","fragment","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","setValue","BooleanAttributePart","Error","PropertyCommitter","super","single","PropertyPart","eventOptionsSupported","window","addEventListener","removeEventListener","_e","EventPart","eventName","eventContext","__boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","capture","once","passive","shouldAddListener","__options","getOptions","event","noChange","nothing","walkerNodeFilter","removeNodesFromTemplate","nextActiveIndexInTemplateParts","nodeIndex","removeCount","nodesToRemoveInTemplate","currentRemovingNode","has","forEach","countNodes","startIndex","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","shadyTemplateFactory","cacheKey","templateCache","stringsArray","WeakMap","keyString","Map","set","join","getTemplateElement","TEMPLATE_TYPES","shadyRenderSet","Set","prepareTemplateStyles","renderedDOM","add","templateElement","createElement","styles","querySelectorAll","condensedStyle","style","textContent","templates","from","removeStylesFromLitTemplates","refNode","insertCount","walkerIndex","insertNodeIntoTemplate","firstChild","querySelector","nativeShadow","cloneNode","removes","JSCompiler_renameProperty","prop","_obj","defaultConverter","Boolean","JSON","stringify","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","converter","reflect","hasChanged","microtaskPromise","Promise","resolve","STATE_HAS_UPDATED","STATE_UPDATE_REQUESTED","STATE_IS_REFLECTING_TO_ATTRIBUTE","STATE_IS_REFLECTING_TO_PROPERTY","STATE_HAS_CONNECTED","finalized","UpdatingElement","HTMLElement","_updateState","_instanceProperties","_updatePromise","_hasConnectedResolver","_changedProperties","_reflectingProperties","initialize","finalize","_classProperties","attr","_attributeNameForProperty","_attributeToPropertyMap","superProperties","getPrototypeOf","k","_ensureClassProperties","noAccessor","oldValue","_requestUpdate","configurable","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","fromAttribute","toAttribute","_saveInstanceProperties","constructor","_v","_attributeToProperty","ctor","attrValue","_propertyValueToAttribute","propName","_propertyValueFromAttribute","shouldRequestUpdate","_valueHasChanged","_hasRequestedUpdate","_enqueueUpdate","updateComplete","reject","previousUpdatePromise","res","rej","_hasConnected","performUpdate","_applyInstanceProperties","shouldUpdate","changedProperties","_markUpdated","firstUpdated","updated","_getUpdateComplete","size","_propertyToAttribute","customElement","classOrDescriptor","clazz","customElements","define","legacyCustomElement","descriptor","kind","elements","standardCustomElement","standardProperty","placement","initializer","assign","legacyProperty","proto","protoOrDescriptor","supportsAdoptingStyleSheets","Document","CSSStyleSheet","constructionToken","CSSResult","cssText","safeToken","_styleSheet","replaceSync","unsafeCSS","css","reduce","acc","idx","textFromCSSResult","flattenStyles","flat","Infinity","arrayFlat","_styles","_getUniqueStyles","userStyles","reduceRight","unshift","renderRoot","createRenderRoot","ShadowRoot","adoptStyles","attachShadow","adoptedStyleSheets","map","styleSheet","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","localName","connectedCallback","hasUpdated","styleElement","templateResult","render","hasRendered","needsScoping","host","firstScopeRender","renderContainer","createDocumentFragment","delete","defaultTemplateProcessor","prefix","html","isCEPolyfill","polyfillWrapFlushCallback","reparentNodes","start","end","before","removeNodes","notNull","message","script","async","truthy","src","registry","extends","templateCaches","directives","f","args","isDirective","appendInto","commentMarker","TemplateResult","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","innerHTML","getHTML","SVGTemplateResult","svgElement","TemplateInstance","__parts","importNode","nodeName","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","useSourceMap","list","toString","cssMapping","btoa","sourceMapping","sourceMap","base64","unescape","encodeURIComponent","concat","sourceURLs","sources","source","sourceRoot","cssWithMappingToString","mediaQuery","alreadyImportedModules","id","_i","previousValues","unsafeHTML","previousValue","prettyPrint","prettify","lang","hasAttribute","setTimeout","PR","prettyPrintOne","language","lineNumbers","then","prettyHtml","win","FLOW_CONTROL_KEYWORDS","COMMON_KEYWORDS","CPP_KEYWORDS","JAVA_KEYWORDS","CSHARP_KEYWORDS","JSCRIPT_KEYWORDS","PERL_KEYWORDS","PYTHON_KEYWORDS","RUBY_KEYWORDS","SH_KEYWORDS","C_TYPES","PR_STRING","PR_KEYWORD","PR_COMMENT","PR_TYPE","PR_LITERAL","PR_PUNCTUATION","PR_PLAIN","PR_SOURCE","REGEXP_PRECEDER_PATTERN","appendDecorations","sourceNode","basePos","sourceCode","langHandler","out","job","pre","langExtension","numberLines","spans","decorations","apply","notWs","childContentWrapper","wrapper","test","nodeValue","createSimpleLexer","shortcutStylePatterns","fallthroughStylePatterns","tokenizer","shortcuts","allPatterns","allRegexs","regexKeys","patternParts","shortcutChars","charAt","regex","regexs","capturedGroupIndex","needToFoldCase","ignoreCase","replace","escapeCharToCodeUnit","decodeEscape","charsetPart","cc0","charCodeAt","c1","parseInt","substring","encodeEscape","charCode","ch","fromCharCode","caseFoldCharset","charSet","charsetParts","ranges","inverse","max","min","sort","a","b","consolidatedRanges","lastRange","range","allowAnywhereFoldCaseAndRenumberGroups","capturedGroups","groupIndex","decimalValue","ch0","cc","rewritten","global","multiline","combinePrefixPatterns","nPatterns","decorate","pos","tokens","styleCache","ti","nTokens","isEmbedded","token","tokenStart","embeddedSource","embeddedSourceStart","embeddedSourceEnd","langHandlerForExtension","sourceDecorator","hc","regexLiterals","regexExcls","regexAny","REGEX_LITERAL","types","keywords","punctuation","decorateSource","startLineNum","isPreformatted","nocode","lineBreak","ownerDocument","li","listItems","walk","className","firstLine","tail","breakAfter","child","lineEndNode","copiedListItem","breakLeftOf","limit","copy","rightSide","parentClone","next","sibling","ol","offset","langHandlerRegistry","registerLangHandler","handler","fileExtensions","ext","extension","applyDecorator","chunks","opt_langExtension","sourceAndSpans","isIE8OrEarlier","navigator","userAgent","decPos","newlineRe","sourceLength","sourceIndex","nSpans","spanIndex","nDecorations","decorationIndex","startPos","startDec","oldDisplay","display","styledText","spanEnd","decEnd","textNode","span","replaceChild","recombineTagsAndDecorations","$prettyPrintOne","sourceCodeHtml","opt_numberLines","nl","$prettyPrint","opt_whenDone","opt_root","root","body","doc","byTagName","tn","getElementsByTagName","codeSegments","j","clock","Date","langExtensionRe","prettyPrintRe","prettyPrintedRe","preformattedTagNameRe","codeRe","preCodeXmpRe","EMPTY","doWork","endTime","cs","attrs","preceder","nt","_","nested","preformatted","currentStyle","defaultView","whitespace","getComputedStyle","getPropertyValue","lineNums"],"mappings":"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","file":"components/code/index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 47);\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // tslint:disable-next-line:no-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        // If `value` isn't already a string, we explicitly convert it here in case\n        // it can't be implicitly converted - i.e. it's a symbol.\n        const valueAsString = typeof value === 'string' ? value : String(value);\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = valueAsString;\n        }\n        else {\n            this.__commitNode(document.createTextNode(valueAsString));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module shady-render\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected. ` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (scopeName, renderedDOM, template) => {\n    shadyRenderSet.add(scopeName);\n    // If `renderedDOM` is stamped from a Template, then we need to edit that\n    // Template's underlying template element. Otherwise, we create one here\n    // to give to ShadyCSS, which still requires one while scoping.\n    const templateElement = !!template ? template.element : document.createElement('template');\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    const { length } = styles;\n    // If there are no styles, skip unnecessary work\n    if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        //\n        // ShadyCSS will only update styles containing @apply in the template\n        // given to `prepareTemplateStyles`. If no lit Template was given,\n        // ShadyCSS will not be able to update uses of @apply in any relevant\n        // template. However, this is not a problem because we only create the\n        // template for the purpose of supporting `prepareAdoptedCssText`,\n        // which doesn't support @apply at all.\n        window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    const content = templateElement.content;\n    if (!!template) {\n        insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n    }\n    else {\n        content.insertBefore(condensedStyle, content.firstChild);\n    }\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n    const style = content.querySelector('style');\n    if (window.ShadyCSS.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else if (!!template) {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    if (!options || typeof options !== 'object' || !options.scopeName) {\n        throw new Error('The `scopeName` option is required.');\n    }\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = compatibleShadyCSSVersion &&\n        container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n        !!container.host;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)\n        // that should apply to `renderContainer` even if the rendered value is\n        // not a TemplateInstance. However, it will only insert scoped styles\n        // into the document if `prepareTemplateStyles` has already been called\n        // for the given scope name.\n        const template = part.value instanceof TemplateInstance ?\n            part.value.template :\n            undefined;\n        prepareTemplateStyles(scopeName, renderContainer, template);\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nvar _a;\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst microtaskPromise = Promise.resolve(true);\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\nconst STATE_HAS_CONNECTED = 1 << 5;\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        this._updatePromise = microtaskPromise;\n        this._hasConnectedResolver = undefined;\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        Object.defineProperty(this.prototype, name, {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                return this[key];\n            },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this._requestUpdate(name, oldValue);\n            },\n            configurable: true,\n            enumerable: true\n        });\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (!superCtor.hasOwnProperty(finalized)) {\n            superCtor.finalize();\n        }\n        this[finalized] = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._saveInstanceProperties();\n        // ensures first update will be caught by an early access of\n        // `updateComplete`\n        this._requestUpdate();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        this._updateState = this._updateState | STATE_HAS_CONNECTED;\n        // Ensure first connection completes an update. Updates cannot complete\n        // before connection and if one is pending connection the\n        // `_hasConnectionResolver` will exist. If so, resolve it to complete the\n        // update, otherwise requestUpdate.\n        if (this._hasConnectedResolver) {\n            this._hasConnectedResolver();\n            this._hasConnectedResolver = undefined;\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor._classProperties.get(propName) || defaultPropertyDeclaration;\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * This private version of `requestUpdate` does not access or return the\n     * `updateComplete` promise. This promise can be overridden and is therefore\n     * not free to access.\n     */\n    _requestUpdate(name, oldValue) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            const ctor = this.constructor;\n            const options = ctor._classProperties.get(name) || defaultPropertyDeclaration;\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                if (!this._changedProperties.has(name)) {\n                    this._changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it's important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._enqueueUpdate();\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        this._requestUpdate(name, oldValue);\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        // Mark state updating...\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        let resolve;\n        let reject;\n        const previousUpdatePromise = this._updatePromise;\n        this._updatePromise = new Promise((res, rej) => {\n            resolve = res;\n            reject = rej;\n        });\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await previousUpdatePromise;\n        }\n        catch (e) {\n            // Ignore any previous errors. We only care that the previous cycle is\n            // done. Any error should have been handled in the previous update.\n        }\n        // Make sure the element has connected before updating.\n        if (!this._hasConnected) {\n            await new Promise((res) => this._hasConnectedResolver = res);\n        }\n        try {\n            const result = this.performUpdate();\n            // If `performUpdate` returns a Promise, we await it. This is done to\n            // enable coordinating updates with a scheduler. Note, the result is\n            // checked to avoid delaying an additional microtask unless we need to.\n            if (result != null) {\n                await result;\n            }\n        }\n        catch (e) {\n            reject(e);\n        }\n        resolve(!this._hasRequestedUpdate);\n    }\n    get _hasConnected() {\n        return (this._updateState & STATE_HAS_CONNECTED);\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * You can override this method to change the timing of updates. If this\n     * method is overridden, `super.performUpdate()` must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.update(changedProperties);\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there's an\n            // update exception.\n            shouldUpdate = false;\n            throw e;\n        }\n        finally {\n            // Ensure element can accept additional updates after an exception.\n            this._markUpdated();\n        }\n        if (shouldUpdate) {\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update.\n     *\n     * To await additional asynchronous work, override the `_getUpdateComplete`\n     * method. For example, it is sometimes useful to await a rendered element\n     * before fulfilling this Promise. To do this, first await\n     * `super._getUpdateComplete()`, then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._getUpdateComplete();\n    }\n    /**\n     * Override point for the `updateComplete` promise.\n     *\n     * It is not safe to override the `updateComplete` getter directly due to a\n     * limitation in TypeScript which means it is not possible to call a\n     * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n     * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n     * This method should be overridden instead. For example:\n     *\n     *   class MyElement extends LitElement {\n     *     async _getUpdateComplete() {\n     *       await super._getUpdateComplete();\n     *       await this._myChild.updateComplete;\n     *     }\n     *   }\n     */\n    _getUpdateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n_a = finalized;\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement[_a] = true;\n//# sourceMappingURL=updating-element.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst legacyCustomElement = (tagName, clazz) => {\n    window.customElements.define(tagName, clazz);\n    // Cast as any because TS doesn't recognize the return type as being a\n    // subtype of the decorated class when clazz is typed as\n    // `Constructor<HTMLElement>` for some reason.\n    // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n    // applied to elements however.\n    // tslint:disable-next-line:no-any\n    return clazz;\n};\nconst standardCustomElement = (tagName, descriptor) => {\n    const { kind, elements } = descriptor;\n    return {\n        kind,\n        elements,\n        // This callback is called once the class is otherwise fully defined\n        finisher(clazz) {\n            window.customElements.define(tagName, clazz);\n        }\n    };\n};\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * @param tagName the name of the custom element to define\n */\nexport const customElement = (tagName) => (classOrDescriptor) => (typeof classOrDescriptor === 'function') ?\n    legacyCustomElement(tagName, classOrDescriptor) :\n    standardCustomElement(tagName, classOrDescriptor);\nconst standardProperty = (options, element) => {\n    // When decorating an accessor, pass it through and add property metadata.\n    // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n    // stomp over the user's accessor.\n    if (element.kind === 'method' && element.descriptor &&\n        !('value' in element.descriptor)) {\n        return Object.assign({}, element, { finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            } });\n    }\n    else {\n        // createProperty() takes care of defining the property, but we still\n        // must return some kind of descriptor, so return a descriptor for an\n        // unused prototype field. The finisher calls createProperty().\n        return {\n            kind: 'field',\n            key: Symbol(),\n            placement: 'own',\n            descriptor: {},\n            // When @babel/plugin-proposal-decorators implements initializers,\n            // do this instead of the initializer below. See:\n            // https://github.com/babel/babel/issues/9260 extras: [\n            //   {\n            //     kind: 'initializer',\n            //     placement: 'own',\n            //     initializer: descriptor.initializer,\n            //   }\n            // ],\n            initializer() {\n                if (typeof element.initializer === 'function') {\n                    this[element.key] = element.initializer.call(this);\n                }\n            },\n            finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            }\n        };\n    }\n};\nconst legacyProperty = (options, proto, name) => {\n    proto.constructor\n        .createProperty(name, options);\n};\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A `PropertyDeclaration` may optionally be\n * supplied to configure property features.\n *\n * @ExportDecoratedItems\n */\nexport function property(options) {\n    // tslint:disable-next-line:no-any decorator\n    return (protoOrDescriptor, name) => (name !== undefined) ?\n        legacyProperty(options, protoOrDescriptor, name) :\n        standardProperty(options, protoOrDescriptor);\n}\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function query(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelector(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function queryAll(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelectorAll(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\nconst legacyQuery = (descriptor, proto, name) => {\n    Object.defineProperty(proto, name, descriptor);\n};\nconst standardQuery = (descriptor, element) => ({\n    kind: 'method',\n    placement: 'prototype',\n    key: element.key,\n    descriptor,\n});\nconst standardEventOptions = (options, element) => {\n    return Object.assign({}, element, { finisher(clazz) {\n            Object.assign(clazz.prototype[element.key], options);\n        } });\n};\nconst legacyEventOptions = \n// tslint:disable-next-line:no-any legacy decorator\n(options, proto, name) => {\n    Object.assign(proto[name], options);\n};\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifis event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n *\n *     class MyElement {\n *\n *       clicked = false;\n *\n *       render() {\n *         return html`<div @click=${this._onClick}`><button></button></div>`;\n *       }\n *\n *       @eventOptions({capture: true})\n *       _onClick(e) {\n *         this.clicked = true;\n *       }\n *     }\n */\nexport const eventOptions = (options) => \n// Return value typed as any to prevent TypeScript from complaining that\n// standard decorator function signature does not match TypeScript decorator\n// signature\n// TODO(kschaaf): unclear why it was only failing on this decorator and not\n// the others\n((protoOrDescriptor, name) => (name !== undefined) ?\n    legacyEventOptions(options, protoOrDescriptor, name) :\n    standardEventOptions(options, protoOrDescriptor));\n//# sourceMappingURL=decorators.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nexport const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n            // is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else if (typeof value === 'number') {\n        return value;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateResult } from 'lit-html';\nimport { render } from 'lit-html/lib/shady-render.js';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html.js';\nimport { supportsAdoptingStyleSheets } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.2.1');\n/**\n * Minimal implementation of Array.prototype.flat\n * @param arr the array to flatten\n * @param result the accumlated result\n */\nfunction arrayFlat(styles, result = []) {\n    for (let i = 0, length = styles.length; i < length; i++) {\n        const value = styles[i];\n        if (Array.isArray(value)) {\n            arrayFlat(value, result);\n        }\n        else {\n            result.push(value);\n        }\n    }\n    return result;\n}\n/** Deeply flattens styles array. Uses native flat if available. */\nconst flattenStyles = (styles) => styles.flat ? styles.flat(Infinity) : arrayFlat(styles);\nexport class LitElement extends UpdatingElement {\n    /** @nocollapse */\n    static finalize() {\n        // The Closure JS Compiler does not always preserve the correct \"this\"\n        // when calling static super methods (b/137460243), so explicitly bind.\n        super.finalize.call(this);\n        // Prepare styling that is stamped at first render time. Styling\n        // is built from user provided `styles` or is inherited from the superclass.\n        this._styles =\n            this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ?\n                this._getUniqueStyles() :\n                this._styles || [];\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Take care not to call `this.styles` multiple times since this generates\n        // new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.styles;\n        const styles = [];\n        if (Array.isArray(userStyles)) {\n            const flatStyles = flattenStyles(userStyles);\n            // As a performance optimization to avoid duplicated styling that can\n            // occur especially when composing via subclassing, de-duplicate styles\n            // preserving the last item in the list. The last item is kept to\n            // try to preserve cascade order with the assumption that it's most\n            // important that last added styles override previous styles.\n            const styleSet = flatStyles.reduceRight((set, s) => {\n                set.add(s);\n                // on IE set.add does not return the set.\n                return set;\n            }, new Set());\n            // Array.from does not work on Set in IE\n            styleSet.forEach((v) => styles.unshift(v));\n        }\n        else if (userStyles) {\n            styles.push(userStyles);\n        }\n        return styles;\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.renderRoot =\n            this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the `static get styles`\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it.\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        super.update(changedProperties);\n        const templateResult = this.render();\n        if (templateResult instanceof TemplateResult) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     */\n    render() {\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n *\n * Note this property name is a string to prevent breaking Closure JS Compiler\n * optimizations. See updating-element.ts for more information.\n */\nLitElement['finalized'] = true;\n/**\n * Render method used to render the lit-html TemplateResult to the element's\n * DOM.\n * @param {TemplateResult} Template to render.\n * @param {Element|DocumentFragment} Node into which to render.\n * @param {String} Element name.\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.1.2');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","import { css, unsafeCSS, CSSResult } from 'lit-element'\nimport { directive, NodePart } from 'lit-html'\n\n/** Takes the import object for scss files and inject it into the custom element */\nexport const _styles = (style: Array<Array<string>>) => css`${unsafeCSS(style[0][1])}`\n\n/** Creates a decorator for the class */\nexport function styles(...styles: Array<any>) {\n  // this is the equalivant of doing in the class\n  // static styles = _styles(style)\n  return (descriptor: any) => {\n    Object.defineProperty(descriptor, 'styles', { value: styles.map(style => style instanceof CSSResult ? style : _styles(style)) })\n    // return {\n    //   ...descriptor,\n    //   elements: [ ...descriptor.elements, {\n    //     kind: 'field',\n    //     placement: 'static',\n    //     key: 'styles',\n    //     descriptor: {},\n    //     initializer: () => styles.map(style => style instanceof CSSResult ? style : _styles(style)),\n    //   }],\n    // }\n  }\n}\n\n/** Check if the value is null if so throw error with the message */\nexport const truthy = (value: any, message: string = 'The value was false') => {\n  if (!value) {\n    throw new Error(message)\n  }\n}\n\n/** Check if the value is null if so throw error with the message */\nexport const notNull = (value: any, message: string = 'The value was null') => {\n  if (value) {\n    return value\n  }\n  throw new Error(message)\n}\n\n/** Used to replate a sleep function in an async call used for debugging */\nexport const sleep = async (time: number) => new Promise(resolve => window.setTimeout(resolve, time))\n\n/** Create a script directive with the src value */\nexport const script = directive((value: string, async: boolean = false) => (part: any) => {\n  truthy(part instanceof NodePart, 'unsafeHTML can only be used in text bindings')\n  const script = document.createElement('script')\n  script.src = value\n  script.async = async\n  part.setValue(script)\n})\n\n/** Create the custom element once */\nexport const customElement = (name: string, options?: ElementDefinitionOptions | string) => (clazz: any) => {\n  const registry = window.customElements\n  // only define once\n  if (!registry.get(name)) {\n    //console.info(`registering <${name}>`)\n    if (typeof options === 'string') {\n      // short hand since there is only one option\n      registry.define(name, clazz, { extends: options })\n    } else {\n      registry.define(name, clazz, options)\n    }\n  }\n  return clazz\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\nconst commentMarker = ` ${marker} `;\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment poisition.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceeding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceeding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (useSourceMap) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return \"@media \".concat(item[2], \"{\").concat(content, \"}\");\n      }\n\n      return content;\n    }).join('');\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery) {\n    if (typeof modules === 'string') {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, '']];\n    }\n\n    var alreadyImportedModules = {};\n\n    for (var i = 0; i < this.length; i++) {\n      // eslint-disable-next-line prefer-destructuring\n      var id = this[i][0];\n\n      if (id != null) {\n        alreadyImportedModules[id] = true;\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = modules[_i]; // skip already imported module\n      // this implementation is not 100% perfect for weird media query combinations\n      // when a module is imported multiple times with different media queries.\n      // I hope this will never occur (Hey this way we have smaller bundles)\n\n      if (item[0] == null || !alreadyImportedModules[item[0]]) {\n        if (mediaQuery && !item[2]) {\n          item[2] = mediaQuery;\n        } else if (mediaQuery) {\n          item[2] = \"(\".concat(item[2], \") and (\").concat(mediaQuery, \")\");\n        }\n\n        list.push(item);\n      }\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring\n\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap && typeof btoa === 'function') {\n    var sourceMapping = toComment(cssMapping);\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return \"/*# sourceURL=\".concat(cssMapping.sourceRoot).concat(source, \" */\");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n  }\n\n  return [content].join('\\n');\n} // Adapted from convert-source-map (MIT)\n\n\nfunction toComment(sourceMap) {\n  // eslint-disable-next-line no-undef\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n  return \"/*# \".concat(data, \" */\");\n}","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isPrimitive } from '../lib/parts.js';\nimport { directive, NodePart } from '../lit-html.js';\n// For each part, remember the value that was last rendered to the part by the\n// unsafeHTML directive, and the DocumentFragment that was last set as a value.\n// The DocumentFragment is used as a unique key to check if the last value\n// rendered to the part was with unsafeHTML. If not, we'll always re-render the\n// value passed to unsafeHTML.\nconst previousValues = new WeakMap();\n/**\n * Renders the result as HTML, rather than text.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive((value) => (part) => {\n    if (!(part instanceof NodePart)) {\n        throw new Error('unsafeHTML can only be used in text bindings');\n    }\n    const previousValue = previousValues.get(part);\n    if (previousValue !== undefined && isPrimitive(value) &&\n        value === previousValue.value && part.value === previousValue.fragment) {\n        return;\n    }\n    const template = document.createElement('template');\n    template.innerHTML = value; // innerHTML casts to string internally\n    const fragment = document.importNode(template.content, true);\n    part.setValue(fragment);\n    previousValues.set(part, { value, fragment });\n});\n//# sourceMappingURL=unsafe-html.js.map","exports = module.exports = require(\"../../../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \".pln{color:#000}@media screen{.str{color:#080}.kwd{color:#008}.com{color:#800}.typ{color:#606}.lit{color:#066}.pun,.opn,.clo{color:#660}.tag{color:#008}.atn{color:#606}.atv{color:#080}.dec,.var{color:#606}.fun{color:red}}@media print, projection{.str{color:#060}.kwd{color:#006;font-weight:bold}.com{color:#600;font-style:italic}.typ{color:#404;font-weight:bold}.lit{color:#044}.pun,.opn,.clo{color:#440}.tag{color:#006;font-weight:bold}.atn{color:#404}.atv{color:#060}}pre.prettyprint{padding:2px;border:1px solid #888}ol.linenums{margin-top:0;margin-bottom:0}li.L0,li.L1,li.L2,li.L3,li.L5,li.L6,li.L7,li.L8{list-style-type:none}li.L1,li.L3,li.L5,li.L7,li.L9{background:#eee}li.L0,li.L1,li.L2,li.L3,li.L5,li.L6,li.L7,li.L8{list-style-type:decimal}\\n\", \"\"]);\n","import { LitElement, html, property } from 'lit-element'\nimport { unsafeHTML } from 'lit-html/directives/unsafe-html.js'\nimport { styles, customElement } from '../../utils'\nimport style from './code.scss'\nimport 'code-prettify'\n\n@customElement('e-code')\n@styles(style)\nexport default class Code extends LitElement {\n  // Show the content as is before prettyity\n  @property() prettyPrint = this.innerHTML\n\n  connectedCallback() {\n    super.connectedCallback()\n    this.prettify()\n  }\n\n  /** Get the language for this code block can be null */\n  get language(): string | null {\n    return this.getAttribute('language')\n  }\n\n  /** When setting the language of the code block retrigger the prettyPrint */\n  set language(lang: string | null) {\n    if (lang) {\n      this.setAttribute('language', lang)\n    } else {\n      this.removeAttribute('language')\n    }\n    this.prettify()\n  }\n\n  /** Get if line numbers are shown or not shown */\n  get lineNumbers(): boolean {\n    return this.hasAttribute('lineNumbers')\n  }\n\n  /** When setting lineNumbers retrigger the printing of the pretty printing */\n  set lineNumbers(value: boolean) {\n    if (value) {\n      this.setAttribute('lineNumbers', 'lineNumbers')\n    } else {\n      this.removeAttribute('lineNumbers')\n    }\n    this.prettify()\n  }\n\n  /**\n    Makes the pretty printed html from the optional language attribute and\n    the optional lineNumbers attribute.\n  */\n  async prettify() {\n    return new Promise((resolve: (value: string) => void) => {\n      window.setTimeout(() => {\n        resolve(PR.prettyPrintOne(this.innerHTML, this.language, this.lineNumbers))\n      })\n    }).then(prettyHtml => this.prettyPrint = prettyHtml)\n  }\n\n  render() {\n    return html`<e-preformat><code>${unsafeHTML(this.prettyPrint)}</code></e-preformat>`\n  }\n}\n","export { default as Code } from './code'\n","/**\n * @license\n * Copyright (C) 2006 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * some functions for browser-side pretty printing of code contained in html.\n *\n * <p>\n * For a fairly comprehensive set of languages see the\n * <a href=\"https://github.com/google/code-prettify#for-which-languages-does-it-work\">README</a>\n * file that came with this source.  At a minimum, the lexer should work on a\n * number of languages including C and friends, Java, Python, Bash, SQL, HTML,\n * XML, CSS, Javascript, and Makefiles.  It works passably on Ruby, PHP and Awk\n * and a subset of Perl, but, because of commenting conventions, doesn't work on\n * Smalltalk, Lisp-like, or CAML-like languages without an explicit lang class.\n * <p>\n * Usage: <ol>\n * <li> include this source file in an html page via\n *   {@code <script type=\"text/javascript\" src=\"/path/to/prettify.js\"></script>}\n * <li> define style rules.  See the example page for examples.\n * <li> mark the {@code <pre>} and {@code <code>} tags in your source with\n *    {@code class=prettyprint.}\n *    You can also use the (html deprecated) {@code <xmp>} tag, but the pretty\n *    printer needs to do more substantial DOM manipulations to support that, so\n *    some css styles may not be preserved.\n * </ol>\n * That's it.  I wanted to keep the API as simple as possible, so there's no\n * need to specify which language the code is in, but if you wish, you can add\n * another class to the {@code <pre>} or {@code <code>} element to specify the\n * language, as in {@code <pre class=\"prettyprint lang-java\">}.  Any class that\n * starts with \"lang-\" followed by a file extension, specifies the file type.\n * See the \"lang-*.js\" files in this directory for code that implements\n * per-language file handlers.\n * <p>\n * Change log:<br>\n * cbeust, 2006/08/22\n * <blockquote>\n *   Java annotations (start with \"@\") are now captured as literals (\"lit\")\n * </blockquote>\n * @requires console\n */\n\n// JSLint declarations\n/*global console, document, navigator, setTimeout, window, define */\n\n\n/**\n* @typedef {!Array.<number|string>}\n* Alternating indices and the decorations that should be inserted there.\n* The indices are monotonically increasing.\n*/\nvar DecorationsT;\n\n/**\n* @typedef {!{\n*   sourceNode: !Element,\n*   pre: !(number|boolean),\n*   langExtension: ?string,\n*   numberLines: ?(number|boolean),\n*   sourceCode: ?string,\n*   spans: ?(Array.<number|Node>),\n*   basePos: ?number,\n*   decorations: ?DecorationsT\n* }}\n* <dl>\n*  <dt>sourceNode<dd>the element containing the source\n*  <dt>sourceCode<dd>source as plain text\n*  <dt>pre<dd>truthy if white-space in text nodes\n*     should be considered significant.\n*  <dt>spans<dd> alternating span start indices into source\n*     and the text node or element (e.g. {@code <BR>}) corresponding to that\n*     span.\n*  <dt>decorations<dd>an array of style classes preceded\n*     by the position at which they start in job.sourceCode in order\n*  <dt>basePos<dd>integer position of this.sourceCode in the larger chunk of\n*     source.\n* </dl>\n*/\nvar JobT;\n\n/**\n* @typedef {!{\n*   sourceCode: string,\n*   spans: !(Array.<number|Node>)\n* }}\n* <dl>\n*  <dt>sourceCode<dd>source as plain text\n*  <dt>spans<dd> alternating span start indices into source\n*     and the text node or element (e.g. {@code <BR>}) corresponding to that\n*     span.\n* </dl>\n*/\nvar SourceSpansT;\n\n/** @define {boolean} */\nvar IN_GLOBAL_SCOPE = false;\n\nvar HACK_TO_FIX_JS_INCLUDE_PL;\n\n/**\n * {@type !{\n *   'createSimpleLexer': function (Array, Array): (function (JobT)),\n *   'registerLangHandler': function (function (JobT), Array.<string>),\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_NAME': string,\n *   'PR_ATTRIB_VALUE': string,\n *   'PR_COMMENT': string,\n *   'PR_DECLARATION': string,\n *   'PR_KEYWORD': string,\n *   'PR_LITERAL': string,\n *   'PR_NOCODE': string,\n *   'PR_PLAIN': string,\n *   'PR_PUNCTUATION': string,\n *   'PR_SOURCE': string,\n *   'PR_STRING': string,\n *   'PR_TAG': string,\n *   'PR_TYPE': string,\n *   'prettyPrintOne': function (string, string, number|boolean),\n *   'prettyPrint': function (?function, ?(HTMLElement|HTMLDocument))\n * }}\n * @const\n */\nvar PR;\n\n/**\n * Split {@code prettyPrint} into multiple timeouts so as not to interfere with\n * UI events.\n * If set to {@code false}, {@code prettyPrint()} is synchronous.\n */\nwindow['PR_SHOULD_USE_CONTINUATION'] = true;\n\n/**\n * Pretty print a chunk of code.\n * @param {string} sourceCodeHtml The HTML to pretty print.\n * @param {string} opt_langExtension The language name to use.\n *     Typically, a filename extension like 'cpp' or 'java'.\n * @param {number|boolean} opt_numberLines True to number lines,\n *     or the 1-indexed number of the first line in sourceCodeHtml.\n * @return {string} code as html, but prettier\n */\nvar prettyPrintOne;\n/**\n * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n * {@code class=prettyprint} and prettify them.\n *\n * @param {Function} opt_whenDone called when prettifying is done.\n * @param {HTMLElement|HTMLDocument} opt_root an element or document\n *   containing all the elements to pretty print.\n *   Defaults to {@code document.body}.\n */\nvar prettyPrint;\n\n\n(function () {\n  var win = window;\n  // Keyword lists for various languages.\n  // We use things that coerce to strings to make them compact when minified\n  // and to defeat aggressive optimizers that fold large string constants.\n  var FLOW_CONTROL_KEYWORDS = [\"break,continue,do,else,for,if,return,while\"];\n  var C_KEYWORDS = [FLOW_CONTROL_KEYWORDS,\"auto,case,char,const,default,\" +\n      \"double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,\" +\n      \"sizeof,static,struct,switch,typedef,union,unsigned,void,volatile\"];\n  var COMMON_KEYWORDS = [C_KEYWORDS,\"catch,class,delete,false,import,\" +\n      \"new,operator,private,protected,public,this,throw,true,try,typeof\"];\n  var CPP_KEYWORDS = [COMMON_KEYWORDS,\"alignas,alignof,align_union,asm,axiom,bool,\" +\n      \"concept,concept_map,const_cast,constexpr,decltype,delegate,\" +\n      \"dynamic_cast,explicit,export,friend,generic,late_check,\" +\n      \"mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,\" +\n      \"static_cast,template,typeid,typename,using,virtual,where\"];\n  var JAVA_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,assert,boolean,byte,extends,finally,final,implements,import,\" +\n      \"instanceof,interface,null,native,package,strictfp,super,synchronized,\" +\n      \"throws,transient\"];\n  var CSHARP_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,\" +\n      \"dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,\" +\n      \"internal,into,is,join,let,lock,null,object,out,override,orderby,params,\" +\n      \"partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,\" +\n      \"unchecked,unsafe,ushort,value,var,virtual,where,yield\"];\n  var COFFEE_KEYWORDS = \"all,and,by,catch,class,else,extends,false,finally,\" +\n      \"for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,\" +\n      \"throw,true,try,unless,until,when,while,yes\";\n  var JSCRIPT_KEYWORDS = [COMMON_KEYWORDS,\n      \"abstract,async,await,constructor,debugger,enum,eval,export,function,\" +\n      \"get,implements,instanceof,interface,let,null,set,undefined,var,with,\" +\n      \"yield,Infinity,NaN\"];\n  var PERL_KEYWORDS = \"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,\" +\n      \"goto,if,import,last,local,my,next,no,our,print,package,redo,require,\" +\n      \"sub,undef,unless,until,use,wantarray,while,BEGIN,END\";\n  var PYTHON_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"and,as,assert,class,def,del,\" +\n      \"elif,except,exec,finally,from,global,import,in,is,lambda,\" +\n      \"nonlocal,not,or,pass,print,raise,try,with,yield,\" +\n      \"False,True,None\"];\n  var RUBY_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"alias,and,begin,case,class,\" +\n      \"def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,\" +\n      \"rescue,retry,self,super,then,true,undef,unless,until,when,yield,\" +\n      \"BEGIN,END\"];\n  var SH_KEYWORDS = [FLOW_CONTROL_KEYWORDS, \"case,done,elif,esac,eval,fi,\" +\n      \"function,in,local,set,then,until\"];\n  var ALL_KEYWORDS = [\n      CPP_KEYWORDS, CSHARP_KEYWORDS, JAVA_KEYWORDS, JSCRIPT_KEYWORDS,\n      PERL_KEYWORDS, PYTHON_KEYWORDS, RUBY_KEYWORDS, SH_KEYWORDS];\n  var C_TYPES = /^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/;\n\n  // token style names.  correspond to css classes\n  /**\n   * token style for a string literal\n   * @const\n   */\n  var PR_STRING = 'str';\n  /**\n   * token style for a keyword\n   * @const\n   */\n  var PR_KEYWORD = 'kwd';\n  /**\n   * token style for a comment\n   * @const\n   */\n  var PR_COMMENT = 'com';\n  /**\n   * token style for a type\n   * @const\n   */\n  var PR_TYPE = 'typ';\n  /**\n   * token style for a literal value.  e.g. 1, null, true.\n   * @const\n   */\n  var PR_LITERAL = 'lit';\n  /**\n   * token style for a punctuation string.\n   * @const\n   */\n  var PR_PUNCTUATION = 'pun';\n  /**\n   * token style for plain text.\n   * @const\n   */\n  var PR_PLAIN = 'pln';\n\n  /**\n   * token style for an sgml tag.\n   * @const\n   */\n  var PR_TAG = 'tag';\n  /**\n   * token style for a markup declaration such as a DOCTYPE.\n   * @const\n   */\n  var PR_DECLARATION = 'dec';\n  /**\n   * token style for embedded source.\n   * @const\n   */\n  var PR_SOURCE = 'src';\n  /**\n   * token style for an sgml attribute name.\n   * @const\n   */\n  var PR_ATTRIB_NAME = 'atn';\n  /**\n   * token style for an sgml attribute value.\n   * @const\n   */\n  var PR_ATTRIB_VALUE = 'atv';\n\n  /**\n   * A class that indicates a section of markup that is not code, e.g. to allow\n   * embedding of line numbers within code listings.\n   * @const\n   */\n  var PR_NOCODE = 'nocode';\n\n  \n  \n  /**\n   * A set of tokens that can precede a regular expression literal in\n   * javascript\n   * http://web.archive.org/web/20070717142515/http://www.mozilla.org/js/language/js20/rationale/syntax.html\n   * has the full list, but I've removed ones that might be problematic when\n   * seen in languages that don't support regular expression literals.\n   *\n   * <p>Specifically, I've removed any keywords that can't precede a regexp\n   * literal in a syntactically legal javascript program, and I've removed the\n   * \"in\" keyword since it's not a keyword in many languages, and might be used\n   * as a count of inches.\n   *\n   * <p>The link above does not accurately describe EcmaScript rules since\n   * it fails to distinguish between (a=++/b/i) and (a++/b/i) but it works\n   * very well in practice.\n   *\n   * @private\n   * @const\n   */\n  var REGEXP_PRECEDER_PATTERN = '(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*';\n  \n  // CAVEAT: this does not properly handle the case where a regular\n  // expression immediately follows another since a regular expression may\n  // have flags for case-sensitivity and the like.  Having regexp tokens\n  // adjacent is not valid in any language I'm aware of, so I'm punting.\n  // TODO: maybe style special characters inside a regexp as punctuation.\n\n  /**\n   * Given a group of {@link RegExp}s, returns a {@code RegExp} that globally\n   * matches the union of the sets of strings matched by the input RegExp.\n   * Since it matches globally, if the input strings have a start-of-input\n   * anchor (/^.../), it is ignored for the purposes of unioning.\n   * @param {Array.<RegExp>} regexs non multiline, non-global regexs.\n   * @return {RegExp} a global regex.\n   */\n  function combinePrefixPatterns(regexs) {\n    var capturedGroupIndex = 0;\n  \n    var needToFoldCase = false;\n    var ignoreCase = false;\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.ignoreCase) {\n        ignoreCase = true;\n      } else if (/[a-z]/i.test(regex.source.replace(\n                     /\\\\u[0-9a-f]{4}|\\\\x[0-9a-f]{2}|\\\\[^ux]/gi, ''))) {\n        needToFoldCase = true;\n        ignoreCase = false;\n        break;\n      }\n    }\n  \n    var escapeCharToCodeUnit = {\n      'b': 8,\n      't': 9,\n      'n': 0xa,\n      'v': 0xb,\n      'f': 0xc,\n      'r': 0xd\n    };\n  \n    function decodeEscape(charsetPart) {\n      var cc0 = charsetPart.charCodeAt(0);\n      if (cc0 !== 92 /* \\\\ */) {\n        return cc0;\n      }\n      var c1 = charsetPart.charAt(1);\n      cc0 = escapeCharToCodeUnit[c1];\n      if (cc0) {\n        return cc0;\n      } else if ('0' <= c1 && c1 <= '7') {\n        return parseInt(charsetPart.substring(1), 8);\n      } else if (c1 === 'u' || c1 === 'x') {\n        return parseInt(charsetPart.substring(2), 16);\n      } else {\n        return charsetPart.charCodeAt(1);\n      }\n    }\n  \n    function encodeEscape(charCode) {\n      if (charCode < 0x20) {\n        return (charCode < 0x10 ? '\\\\x0' : '\\\\x') + charCode.toString(16);\n      }\n      var ch = String.fromCharCode(charCode);\n      return (ch === '\\\\' || ch === '-' || ch === ']' || ch === '^')\n          ? \"\\\\\" + ch : ch;\n    }\n  \n    function caseFoldCharset(charSet) {\n      var charsetParts = charSet.substring(1, charSet.length - 1).match(\n          new RegExp(\n              '\\\\\\\\u[0-9A-Fa-f]{4}'\n              + '|\\\\\\\\x[0-9A-Fa-f]{2}'\n              + '|\\\\\\\\[0-3][0-7]{0,2}'\n              + '|\\\\\\\\[0-7]{1,2}'\n              + '|\\\\\\\\[\\\\s\\\\S]'\n              + '|-'\n              + '|[^-\\\\\\\\]',\n              'g'));\n      var ranges = [];\n      var inverse = charsetParts[0] === '^';\n  \n      var out = ['['];\n      if (inverse) { out.push('^'); }\n  \n      for (var i = inverse ? 1 : 0, n = charsetParts.length; i < n; ++i) {\n        var p = charsetParts[i];\n        if (/\\\\[bdsw]/i.test(p)) {  // Don't muck with named groups.\n          out.push(p);\n        } else {\n          var start = decodeEscape(p);\n          var end;\n          if (i + 2 < n && '-' === charsetParts[i + 1]) {\n            end = decodeEscape(charsetParts[i + 2]);\n            i += 2;\n          } else {\n            end = start;\n          }\n          ranges.push([start, end]);\n          // If the range might intersect letters, then expand it.\n          // This case handling is too simplistic.\n          // It does not deal with non-latin case folding.\n          // It works for latin source code identifiers though.\n          if (!(end < 65 || start > 122)) {\n            if (!(end < 65 || start > 90)) {\n              ranges.push([Math.max(65, start) | 32, Math.min(end, 90) | 32]);\n            }\n            if (!(end < 97 || start > 122)) {\n              ranges.push([Math.max(97, start) & ~32, Math.min(end, 122) & ~32]);\n            }\n          }\n        }\n      }\n  \n      // [[1, 10], [3, 4], [8, 12], [14, 14], [16, 16], [17, 17]]\n      // -> [[1, 12], [14, 14], [16, 17]]\n      ranges.sort(function (a, b) { return (a[0] - b[0]) || (b[1]  - a[1]); });\n      var consolidatedRanges = [];\n      var lastRange = [];\n      for (var i = 0; i < ranges.length; ++i) {\n        var range = ranges[i];\n        if (range[0] <= lastRange[1] + 1) {\n          lastRange[1] = Math.max(lastRange[1], range[1]);\n        } else {\n          consolidatedRanges.push(lastRange = range);\n        }\n      }\n  \n      for (var i = 0; i < consolidatedRanges.length; ++i) {\n        var range = consolidatedRanges[i];\n        out.push(encodeEscape(range[0]));\n        if (range[1] > range[0]) {\n          if (range[1] + 1 > range[0]) { out.push('-'); }\n          out.push(encodeEscape(range[1]));\n        }\n      }\n      out.push(']');\n      return out.join('');\n    }\n  \n    function allowAnywhereFoldCaseAndRenumberGroups(regex) {\n      // Split into character sets, escape sequences, punctuation strings\n      // like ('(', '(?:', ')', '^'), and runs of characters that do not\n      // include any of the above.\n      var parts = regex.source.match(\n          new RegExp(\n              '(?:'\n              + '\\\\[(?:[^\\\\x5C\\\\x5D]|\\\\\\\\[\\\\s\\\\S])*\\\\]'  // a character set\n              + '|\\\\\\\\u[A-Fa-f0-9]{4}'  // a unicode escape\n              + '|\\\\\\\\x[A-Fa-f0-9]{2}'  // a hex escape\n              + '|\\\\\\\\[0-9]+'  // a back-reference or octal escape\n              + '|\\\\\\\\[^ux0-9]'  // other escape sequence\n              + '|\\\\(\\\\?[:!=]'  // start of a non-capturing group\n              + '|[\\\\(\\\\)\\\\^]'  // start/end of a group, or line start\n              + '|[^\\\\x5B\\\\x5C\\\\(\\\\)\\\\^]+'  // run of other characters\n              + ')',\n              'g'));\n      var n = parts.length;\n  \n      // Maps captured group numbers to the number they will occupy in\n      // the output or to -1 if that has not been determined, or to\n      // undefined if they need not be capturing in the output.\n      var capturedGroups = [];\n  \n      // Walk over and identify back references to build the capturedGroups\n      // mapping.\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          // groups are 1-indexed, so max group index is count of '('\n          ++groupIndex;\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue) {\n            if (decimalValue <= groupIndex) {\n              capturedGroups[decimalValue] = -1;\n            } else {\n              // Replace with an unambiguous escape sequence so that\n              // an octal escape sequence does not turn into a backreference\n              // to a capturing group from an earlier regex.\n              parts[i] = encodeEscape(decimalValue);\n            }\n          }\n        }\n      }\n  \n      // Renumber groups and reduce capturing groups to non-capturing groups\n      // where possible.\n      for (var i = 1; i < capturedGroups.length; ++i) {\n        if (-1 === capturedGroups[i]) {\n          capturedGroups[i] = ++capturedGroupIndex;\n        }\n      }\n      for (var i = 0, groupIndex = 0; i < n; ++i) {\n        var p = parts[i];\n        if (p === '(') {\n          ++groupIndex;\n          if (!capturedGroups[groupIndex]) {\n            parts[i] = '(?:';\n          }\n        } else if ('\\\\' === p.charAt(0)) {\n          var decimalValue = +p.substring(1);\n          if (decimalValue && decimalValue <= groupIndex) {\n            parts[i] = '\\\\' + capturedGroups[decimalValue];\n          }\n        }\n      }\n  \n      // Remove any prefix anchors so that the output will match anywhere.\n      // ^^ really does mean an anchored match though.\n      for (var i = 0; i < n; ++i) {\n        if ('^' === parts[i] && '^' !== parts[i + 1]) { parts[i] = ''; }\n      }\n  \n      // Expand letters to groups to handle mixing of case-sensitive and\n      // case-insensitive patterns if necessary.\n      if (regex.ignoreCase && needToFoldCase) {\n        for (var i = 0; i < n; ++i) {\n          var p = parts[i];\n          var ch0 = p.charAt(0);\n          if (p.length >= 2 && ch0 === '[') {\n            parts[i] = caseFoldCharset(p);\n          } else if (ch0 !== '\\\\') {\n            // TODO: handle letters in numeric escapes.\n            parts[i] = p.replace(\n                /[a-zA-Z]/g,\n                function (ch) {\n                  var cc = ch.charCodeAt(0);\n                  return '[' + String.fromCharCode(cc & ~32, cc | 32) + ']';\n                });\n          }\n        }\n      }\n  \n      return parts.join('');\n    }\n  \n    var rewritten = [];\n    for (var i = 0, n = regexs.length; i < n; ++i) {\n      var regex = regexs[i];\n      if (regex.global || regex.multiline) { throw new Error('' + regex); }\n      rewritten.push(\n          '(?:' + allowAnywhereFoldCaseAndRenumberGroups(regex) + ')');\n    }\n  \n    return new RegExp(rewritten.join('|'), ignoreCase ? 'gi' : 'g');\n  }\n\n  /**\n   * Split markup into a string of source code and an array mapping ranges in\n   * that string to the text nodes in which they appear.\n   *\n   * <p>\n   * The HTML DOM structure:</p>\n   * <pre>\n   * (Element   \"p\"\n   *   (Element \"b\"\n   *     (Text  \"print \"))       ; #1\n   *   (Text    \"'Hello '\")      ; #2\n   *   (Element \"br\")            ; #3\n   *   (Text    \"  + 'World';\")) ; #4\n   * </pre>\n   * <p>\n   * corresponds to the HTML\n   * {@code <p><b>print </b>'Hello '<br>  + 'World';</p>}.</p>\n   *\n   * <p>\n   * It will produce the output:</p>\n   * <pre>\n   * {\n   *   sourceCode: \"print 'Hello '\\n  + 'World';\",\n   *   //                     1          2\n   *   //           012345678901234 5678901234567\n   *   spans: [0, #1, 6, #2, 14, #3, 15, #4]\n   * }\n   * </pre>\n   * <p>\n   * where #1 is a reference to the {@code \"print \"} text node above, and so\n   * on for the other text nodes.\n   * </p>\n   *\n   * <p>\n   * The {@code} spans array is an array of pairs.  Even elements are the start\n   * indices of substrings, and odd elements are the text nodes (or BR elements)\n   * that contain the text for those substrings.\n   * Substrings continue until the next index or the end of the source.\n   * </p>\n   *\n   * @param {Node} node an HTML DOM subtree containing source-code.\n   * @param {boolean|number} isPreformatted truthy if white-space in\n   *    text nodes should be considered significant.\n   * @return {SourceSpansT} source code and the nodes in which they occur.\n   */\n  function extractSourceSpans(node, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n  \n    var chunks = [];\n    var length = 0;\n    var spans = [];\n    var k = 0;\n  \n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1) {  // Element\n        if (nocode.test(node.className)) { return; }\n        for (var child = node.firstChild; child; child = child.nextSibling) {\n          walk(child);\n        }\n        var nodeName = node.nodeName.toLowerCase();\n        if ('br' === nodeName || 'li' === nodeName) {\n          chunks[k] = '\\n';\n          spans[k << 1] = length++;\n          spans[(k++ << 1) | 1] = node;\n        }\n      } else if (type == 3 || type == 4) {  // Text\n        var text = node.nodeValue;\n        if (text.length) {\n          if (!isPreformatted) {\n            text = text.replace(/[ \\t\\r\\n]+/g, ' ');\n          } else {\n            text = text.replace(/\\r\\n?/g, '\\n');  // Normalize newlines.\n          }\n          // TODO: handle tabs here?\n          chunks[k] = text;\n          spans[k << 1] = length;\n          length += text.length;\n          spans[(k++ << 1) | 1] = node;\n        }\n      }\n    }\n  \n    walk(node);\n  \n    return {\n      sourceCode: chunks.join('').replace(/\\n$/, ''),\n      spans: spans\n    };\n  }\n\n  /**\n   * Apply the given language handler to sourceCode and add the resulting\n   * decorations to out.\n   * @param {!Element} sourceNode\n   * @param {number} basePos the index of sourceCode within the chunk of source\n   *    whose decorations are already present on out.\n   * @param {string} sourceCode\n   * @param {function(JobT)} langHandler\n   * @param {DecorationsT} out\n   */\n  function appendDecorations(\n      sourceNode, basePos, sourceCode, langHandler, out) {\n    if (!sourceCode) { return; }\n    /** @type {JobT} */\n    var job = {\n      sourceNode: sourceNode,\n      pre: 1,\n      langExtension: null,\n      numberLines: null,\n      sourceCode: sourceCode,\n      spans: null,\n      basePos: basePos,\n      decorations: null\n    };\n    langHandler(job);\n    out.push.apply(out, job.decorations);\n  }\n\n  var notWs = /\\S/;\n\n  /**\n   * Given an element, if it contains only one child element and any text nodes\n   * it contains contain only space characters, return the sole child element.\n   * Otherwise returns undefined.\n   * <p>\n   * This is meant to return the CODE element in {@code <pre><code ...>} when\n   * there is a single child element that contains all the non-space textual\n   * content, but not to return anything where there are multiple child elements\n   * as in {@code <pre><code>...</code><code>...</code></pre>} or when there\n   * is textual content.\n   */\n  function childContentWrapper(element) {\n    var wrapper = undefined;\n    for (var c = element.firstChild; c; c = c.nextSibling) {\n      var type = c.nodeType;\n      wrapper = (type === 1)  // Element Node\n          ? (wrapper ? element : c)\n          : (type === 3)  // Text Node\n          ? (notWs.test(c.nodeValue) ? element : wrapper)\n          : wrapper;\n    }\n    return wrapper === element ? undefined : wrapper;\n  }\n\n  /** Given triples of [style, pattern, context] returns a lexing function,\n    * The lexing function interprets the patterns to find token boundaries and\n    * returns a decoration list of the form\n    * [index_0, style_0, index_1, style_1, ..., index_n, style_n]\n    * where index_n is an index into the sourceCode, and style_n is a style\n    * constant like PR_PLAIN.  index_n-1 <= index_n, and style_n-1 applies to\n    * all characters in sourceCode[index_n-1:index_n].\n    *\n    * The stylePatterns is a list whose elements have the form\n    * [style : string, pattern : RegExp, DEPRECATED, shortcut : string].\n    *\n    * Style is a style constant like PR_PLAIN, or can be a string of the\n    * form 'lang-FOO', where FOO is a language extension describing the\n    * language of the portion of the token in $1 after pattern executes.\n    * E.g., if style is 'lang-lisp', and group 1 contains the text\n    * '(hello (world))', then that portion of the token will be passed to the\n    * registered lisp handler for formatting.\n    * The text before and after group 1 will be restyled using this decorator\n    * so decorators should take care that this doesn't result in infinite\n    * recursion.  For example, the HTML lexer rule for SCRIPT elements looks\n    * something like ['lang-js', /<[s]cript>(.+?)<\\/script>/].  This may match\n    * '<script>foo()<\\/script>', which would cause the current decorator to\n    * be called with '<script>' which would not match the same rule since\n    * group 1 must not be empty, so it would be instead styled as PR_TAG by\n    * the generic tag rule.  The handler registered for the 'js' extension would\n    * then be called with 'foo()', and finally, the current decorator would\n    * be called with '<\\/script>' which would not match the original rule and\n    * so the generic tag rule would identify it as a tag.\n    *\n    * Pattern must only match prefixes, and if it matches a prefix, then that\n    * match is considered a token with the same style.\n    *\n    * Context is applied to the last non-whitespace, non-comment token\n    * recognized.\n    *\n    * Shortcut is an optional string of characters, any of which, if the first\n    * character, gurantee that this pattern and only this pattern matches.\n    *\n    * @param {Array} shortcutStylePatterns patterns that always start with\n    *   a known character.  Must have a shortcut string.\n    * @param {Array} fallthroughStylePatterns patterns that will be tried in\n    *   order if the shortcut ones fail.  May have shortcuts.\n    *\n    * @return {function (JobT)} a function that takes an undecorated job and\n    *   attaches a list of decorations.\n    */\n  function createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns) {\n    var shortcuts = {};\n    var tokenizer;\n    (function () {\n      var allPatterns = shortcutStylePatterns.concat(fallthroughStylePatterns);\n      var allRegexs = [];\n      var regexKeys = {};\n      for (var i = 0, n = allPatterns.length; i < n; ++i) {\n        var patternParts = allPatterns[i];\n        var shortcutChars = patternParts[3];\n        if (shortcutChars) {\n          for (var c = shortcutChars.length; --c >= 0;) {\n            shortcuts[shortcutChars.charAt(c)] = patternParts;\n          }\n        }\n        var regex = patternParts[1];\n        var k = '' + regex;\n        if (!regexKeys.hasOwnProperty(k)) {\n          allRegexs.push(regex);\n          regexKeys[k] = null;\n        }\n      }\n      allRegexs.push(/[\\0-\\uffff]/);\n      tokenizer = combinePrefixPatterns(allRegexs);\n    })();\n\n    var nPatterns = fallthroughStylePatterns.length;\n\n    /**\n     * Lexes job.sourceCode and attaches an output array job.decorations of\n     * style classes preceded by the position at which they start in\n     * job.sourceCode in order.\n     *\n     * @type{function (JobT)}\n     */\n    var decorate = function (job) {\n      var sourceCode = job.sourceCode, basePos = job.basePos;\n      var sourceNode = job.sourceNode;\n      /** Even entries are positions in source in ascending order.  Odd enties\n        * are style markers (e.g., PR_COMMENT) that run from that position until\n        * the end.\n        * @type {DecorationsT}\n        */\n      var decorations = [basePos, PR_PLAIN];\n      var pos = 0;  // index into sourceCode\n      var tokens = sourceCode.match(tokenizer) || [];\n      var styleCache = {};\n\n      for (var ti = 0, nTokens = tokens.length; ti < nTokens; ++ti) {\n        var token = tokens[ti];\n        var style = styleCache[token];\n        var match = void 0;\n\n        var isEmbedded;\n        if (typeof style === 'string') {\n          isEmbedded = false;\n        } else {\n          var patternParts = shortcuts[token.charAt(0)];\n          if (patternParts) {\n            match = token.match(patternParts[1]);\n            style = patternParts[0];\n          } else {\n            for (var i = 0; i < nPatterns; ++i) {\n              patternParts = fallthroughStylePatterns[i];\n              match = token.match(patternParts[1]);\n              if (match) {\n                style = patternParts[0];\n                break;\n              }\n            }\n\n            if (!match) {  // make sure that we make progress\n              style = PR_PLAIN;\n            }\n          }\n\n          isEmbedded = style.length >= 5 && 'lang-' === style.substring(0, 5);\n          if (isEmbedded && !(match && typeof match[1] === 'string')) {\n            isEmbedded = false;\n            style = PR_SOURCE;\n          }\n\n          if (!isEmbedded) { styleCache[token] = style; }\n        }\n\n        var tokenStart = pos;\n        pos += token.length;\n\n        if (!isEmbedded) {\n          decorations.push(basePos + tokenStart, style);\n        } else {  // Treat group 1 as an embedded block of source code.\n          var embeddedSource = match[1];\n          var embeddedSourceStart = token.indexOf(embeddedSource);\n          var embeddedSourceEnd = embeddedSourceStart + embeddedSource.length;\n          if (match[2]) {\n            // If embeddedSource can be blank, then it would match at the\n            // beginning which would cause us to infinitely recurse on the\n            // entire token, so we catch the right context in match[2].\n            embeddedSourceEnd = token.length - match[2].length;\n            embeddedSourceStart = embeddedSourceEnd - embeddedSource.length;\n          }\n          var lang = style.substring(5);\n          // Decorate the left of the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart,\n              token.substring(0, embeddedSourceStart),\n              decorate, decorations);\n          // Decorate the embedded source\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceStart,\n              embeddedSource,\n              langHandlerForExtension(lang, embeddedSource),\n              decorations);\n          // Decorate the right of the embedded section\n          appendDecorations(\n              sourceNode,\n              basePos + tokenStart + embeddedSourceEnd,\n              token.substring(embeddedSourceEnd),\n              decorate, decorations);\n        }\n      }\n      job.decorations = decorations;\n    };\n    return decorate;\n  }\n\n  /** returns a function that produces a list of decorations from source text.\n    *\n    * This code treats \", ', and ` as string delimiters, and \\ as a string\n    * escape.  It does not recognize perl's qq() style strings.\n    * It has no special handling for double delimiter escapes as in basic, or\n    * the tripled delimiters used in python, but should work on those regardless\n    * although in those cases a single string literal may be broken up into\n    * multiple adjacent string literals.\n    *\n    * It recognizes C, C++, and shell style comments.\n    *\n    * @param {Object} options a set of optional parameters.\n    * @return {function (JobT)} a function that examines the source code\n    *     in the input job and builds a decoration list which it attaches to\n    *     the job.\n    */\n  function sourceDecorator(options) {\n    var shortcutStylePatterns = [], fallthroughStylePatterns = [];\n    if (options['tripleQuotedStrings']) {\n      // '''multi-line-string''', 'single-line-string', and double-quoted\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'\\'\\'(?:[^\\'\\\\]|\\\\[\\s\\S]|\\'{1,2}(?=[^\\']))*(?:\\'\\'\\'|$)|\\\"\\\"\\\"(?:[^\\\"\\\\]|\\\\[\\s\\S]|\\\"{1,2}(?=[^\\\"]))*(?:\\\"\\\"\\\"|$)|\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$))/,\n           null, '\\'\"']);\n    } else if (options['multiLineStrings']) {\n      // 'multi-line-string', \"multi-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,  /^(?:\\'(?:[^\\\\\\']|\\\\[\\s\\S])*(?:\\'|$)|\\\"(?:[^\\\\\\\"]|\\\\[\\s\\S])*(?:\\\"|$)|\\`(?:[^\\\\\\`]|\\\\[\\s\\S])*(?:\\`|$))/,\n           null, '\\'\"`']);\n    } else {\n      // 'single-line-string', \"single-line-string\"\n      shortcutStylePatterns.push(\n          [PR_STRING,\n           /^(?:\\'(?:[^\\\\\\'\\r\\n]|\\\\.)*(?:\\'|$)|\\\"(?:[^\\\\\\\"\\r\\n]|\\\\.)*(?:\\\"|$))/,\n           null, '\"\\'']);\n    }\n    if (options['verbatimStrings']) {\n      // verbatim-string-literal production from the C# grammar.  See issue 93.\n      fallthroughStylePatterns.push(\n          [PR_STRING, /^@\\\"(?:[^\\\"]|\\\"\\\")*(?:\\\"|$)/, null]);\n    }\n    var hc = options['hashComments'];\n    if (hc) {\n      if (options['cStyleComments']) {\n        if (hc > 1) {  // multiline hash comments\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/, null, '#']);\n        } else {\n          // Stop C preprocessor declarations at an unclosed open comment\n          shortcutStylePatterns.push(\n              [PR_COMMENT, /^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\r\\n]*)/,\n               null, '#']);\n        }\n        // #include <stdio.h>\n        fallthroughStylePatterns.push(\n            [PR_STRING,\n             /^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,\n             null]);\n      } else {\n        shortcutStylePatterns.push([PR_COMMENT, /^#[^\\r\\n]*/, null, '#']);\n      }\n    }\n    if (options['cStyleComments']) {\n      fallthroughStylePatterns.push([PR_COMMENT, /^\\/\\/[^\\r\\n]*/, null]);\n      fallthroughStylePatterns.push(\n          [PR_COMMENT, /^\\/\\*[\\s\\S]*?(?:\\*\\/|$)/, null]);\n    }\n    var regexLiterals = options['regexLiterals'];\n    if (regexLiterals) {\n      /**\n       * @const\n       */\n      var regexExcls = regexLiterals > 1\n        ? ''  // Multiline regex literals\n        : '\\n\\r';\n      /**\n       * @const\n       */\n      var regexAny = regexExcls ? '.' : '[\\\\S\\\\s]';\n      /**\n       * @const\n       */\n      var REGEX_LITERAL = (\n          // A regular expression literal starts with a slash that is\n          // not followed by * or / so that it is not confused with\n          // comments.\n          '/(?=[^/*' + regexExcls + '])'\n          // and then contains any number of raw characters,\n          + '(?:[^/\\\\x5B\\\\x5C' + regexExcls + ']'\n          // escape sequences (\\x5C),\n          +    '|\\\\x5C' + regexAny\n          // or non-nesting character sets (\\x5B\\x5D);\n          +    '|\\\\x5B(?:[^\\\\x5C\\\\x5D' + regexExcls + ']'\n          +             '|\\\\x5C' + regexAny + ')*(?:\\\\x5D|$))+'\n          // finally closed by a /.\n          + '/');\n      fallthroughStylePatterns.push(\n          ['lang-regex',\n           RegExp('^' + REGEXP_PRECEDER_PATTERN + '(' + REGEX_LITERAL + ')')\n           ]);\n    }\n\n    var types = options['types'];\n    if (types) {\n      fallthroughStylePatterns.push([PR_TYPE, types]);\n    }\n\n    var keywords = (\"\" + options['keywords']).replace(/^ | $/g, '');\n    if (keywords.length) {\n      fallthroughStylePatterns.push(\n          [PR_KEYWORD,\n           new RegExp('^(?:' + keywords.replace(/[\\s,]+/g, '|') + ')\\\\b'),\n           null]);\n    }\n\n    shortcutStylePatterns.push([PR_PLAIN,       /^\\s+/, null, ' \\r\\n\\t\\xA0']);\n\n    var punctuation =\n      // The Bash man page says\n\n      // A word is a sequence of characters considered as a single\n      // unit by GRUB. Words are separated by metacharacters,\n      // which are the following plus space, tab, and newline: { }\n      // | & $ ; < >\n      // ...\n\n      // A word beginning with # causes that word and all remaining\n      // characters on that line to be ignored.\n\n      // which means that only a '#' after /(?:^|[{}|&$;<>\\s])/ starts a\n      // comment but empirically\n      // $ echo {#}\n      // {#}\n      // $ echo \\$#\n      // $#\n      // $ echo }#\n      // }#\n\n      // so /(?:^|[|&;<>\\s])/ is more appropriate.\n\n      // http://gcc.gnu.org/onlinedocs/gcc-2.95.3/cpp_1.html#SEC3\n      // suggests that this definition is compatible with a\n      // default mode that tries to use a single token definition\n      // to recognize both bash/python style comments and C\n      // preprocessor directives.\n\n      // This definition of punctuation does not include # in the list of\n      // follow-on exclusions, so # will not be broken before if preceeded\n      // by a punctuation character.  We could try to exclude # after\n      // [|&;<>] but that doesn't seem to cause many major problems.\n      // If that does turn out to be a problem, we should change the below\n      // when hc is truthy to include # in the run of punctuation characters\n      // only when not followint [|&;<>].\n      '^.[^\\\\s\\\\w.$@\\'\"`/\\\\\\\\]*';\n    if (options['regexLiterals']) {\n      punctuation += '(?!\\s*\\/)';\n    }\n\n    fallthroughStylePatterns.push(\n        // TODO(mikesamuel): recognize non-latin letters and numerals in idents\n        [PR_LITERAL,     /^@[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_TYPE,        /^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\\w+_t\\b)/, null],\n        [PR_PLAIN,       /^[a-z_$][a-z_$@0-9]*/i, null],\n        [PR_LITERAL,\n         new RegExp(\n             '^(?:'\n             // A hex number\n             + '0x[a-f0-9]+'\n             // or an octal or decimal number,\n             + '|(?:\\\\d(?:_\\\\d+)*\\\\d*(?:\\\\.\\\\d*)?|\\\\.\\\\d\\\\+)'\n             // possibly in scientific notation\n             + '(?:e[+\\\\-]?\\\\d+)?'\n             + ')'\n             // with an optional modifier like UL for unsigned long\n             + '[a-z]*', 'i'),\n         null, '0123456789'],\n        // Don't treat escaped quotes in bash as starting strings.\n        // See issue 144.\n        [PR_PLAIN,       /^\\\\[\\s\\S]?/, null],\n        [PR_PUNCTUATION, new RegExp(punctuation), null]);\n\n    return createSimpleLexer(shortcutStylePatterns, fallthroughStylePatterns);\n  }\n\n  var decorateSource = sourceDecorator({\n        'keywords': ALL_KEYWORDS,\n        'hashComments': true,\n        'cStyleComments': true,\n        'multiLineStrings': true,\n        'regexLiterals': true\n      });\n\n  /**\n   * Given a DOM subtree, wraps it in a list, and puts each line into its own\n   * list item.\n   *\n   * @param {Node} node modified in place.  Its content is pulled into an\n   *     HTMLOListElement, and each line is moved into a separate list item.\n   *     This requires cloning elements, so the input might not have unique\n   *     IDs after numbering.\n   * @param {number|null|boolean} startLineNum\n   *     If truthy, coerced to an integer which is the 1-indexed line number\n   *     of the first line of code.  The number of the first line will be\n   *     attached to the list.\n   * @param {boolean} isPreformatted true iff white-space in text nodes should\n   *     be treated as significant.\n   */\n  function numberLines(node, startLineNum, isPreformatted) {\n    var nocode = /(?:^|\\s)nocode(?:\\s|$)/;\n    var lineBreak = /\\r\\n?|\\n/;\n  \n    var document = node.ownerDocument;\n  \n    var li = document.createElement('li');\n    while (node.firstChild) {\n      li.appendChild(node.firstChild);\n    }\n    // An array of lines.  We split below, so this is initialized to one\n    // un-split line.\n    var listItems = [li];\n  \n    function walk(node) {\n      var type = node.nodeType;\n      if (type == 1 && !nocode.test(node.className)) {  // Element\n        if ('br' === node.nodeName) {\n          breakAfter(node);\n          // Discard the <BR> since it is now flush against a </LI>.\n          if (node.parentNode) {\n            node.parentNode.removeChild(node);\n          }\n        } else {\n          for (var child = node.firstChild; child; child = child.nextSibling) {\n            walk(child);\n          }\n        }\n      } else if ((type == 3 || type == 4) && isPreformatted) {  // Text\n        var text = node.nodeValue;\n        var match = text.match(lineBreak);\n        if (match) {\n          var firstLine = text.substring(0, match.index);\n          node.nodeValue = firstLine;\n          var tail = text.substring(match.index + match[0].length);\n          if (tail) {\n            var parent = node.parentNode;\n            parent.insertBefore(\n              document.createTextNode(tail), node.nextSibling);\n          }\n          breakAfter(node);\n          if (!firstLine) {\n            // Don't leave blank text nodes in the DOM.\n            node.parentNode.removeChild(node);\n          }\n        }\n      }\n    }\n  \n    // Split a line after the given node.\n    function breakAfter(lineEndNode) {\n      // If there's nothing to the right, then we can skip ending the line\n      // here, and move root-wards since splitting just before an end-tag\n      // would require us to create a bunch of empty copies.\n      while (!lineEndNode.nextSibling) {\n        lineEndNode = lineEndNode.parentNode;\n        if (!lineEndNode) { return; }\n      }\n  \n      function breakLeftOf(limit, copy) {\n        // Clone shallowly if this node needs to be on both sides of the break.\n        var rightSide = copy ? limit.cloneNode(false) : limit;\n        var parent = limit.parentNode;\n        if (parent) {\n          // We clone the parent chain.\n          // This helps us resurrect important styling elements that cross lines.\n          // E.g. in <i>Foo<br>Bar</i>\n          // should be rewritten to <li><i>Foo</i></li><li><i>Bar</i></li>.\n          var parentClone = breakLeftOf(parent, 1);\n          // Move the clone and everything to the right of the original\n          // onto the cloned parent.\n          var next = limit.nextSibling;\n          parentClone.appendChild(rightSide);\n          for (var sibling = next; sibling; sibling = next) {\n            next = sibling.nextSibling;\n            parentClone.appendChild(sibling);\n          }\n        }\n        return rightSide;\n      }\n  \n      var copiedListItem = breakLeftOf(lineEndNode.nextSibling, 0);\n  \n      // Walk the parent chain until we reach an unattached LI.\n      for (var parent;\n           // Check nodeType since IE invents document fragments.\n           (parent = copiedListItem.parentNode) && parent.nodeType === 1;) {\n        copiedListItem = parent;\n      }\n      // Put it on the list of lines for later processing.\n      listItems.push(copiedListItem);\n    }\n  \n    // Split lines while there are lines left to split.\n    for (var i = 0;  // Number of lines that have been split so far.\n         i < listItems.length;  // length updated by breakAfter calls.\n         ++i) {\n      walk(listItems[i]);\n    }\n  \n    // Make sure numeric indices show correctly.\n    if (startLineNum === (startLineNum|0)) {\n      listItems[0].setAttribute('value', startLineNum);\n    }\n  \n    var ol = document.createElement('ol');\n    ol.className = 'linenums';\n    var offset = Math.max(0, ((startLineNum - 1 /* zero index */)) | 0) || 0;\n    for (var i = 0, n = listItems.length; i < n; ++i) {\n      li = listItems[i];\n      // Stick a class on the LIs so that stylesheets can\n      // color odd/even rows, or any other row pattern that\n      // is co-prime with 10.\n      li.className = 'L' + ((i + offset) % 10);\n      if (!li.firstChild) {\n        li.appendChild(document.createTextNode('\\xA0'));\n      }\n      ol.appendChild(li);\n    }\n  \n    node.appendChild(ol);\n  }\n\n  /**\n   * Breaks {@code job.sourceCode} around style boundaries in\n   * {@code job.decorations} and modifies {@code job.sourceNode} in place.\n   * @param {JobT} job\n   * @private\n   */\n  function recombineTagsAndDecorations(job) {\n    var isIE8OrEarlier = /\\bMSIE\\s(\\d+)/.exec(navigator.userAgent);\n    isIE8OrEarlier = isIE8OrEarlier && +isIE8OrEarlier[1] <= 8;\n    var newlineRe = /\\n/g;\n  \n    var source = job.sourceCode;\n    var sourceLength = source.length;\n    // Index into source after the last code-unit recombined.\n    var sourceIndex = 0;\n  \n    var spans = job.spans;\n    var nSpans = spans.length;\n    // Index into spans after the last span which ends at or before sourceIndex.\n    var spanIndex = 0;\n  \n    var decorations = job.decorations;\n    var nDecorations = decorations.length;\n    // Index into decorations after the last decoration which ends at or before\n    // sourceIndex.\n    var decorationIndex = 0;\n  \n    // Remove all zero-length decorations.\n    decorations[nDecorations] = sourceLength;\n    var decPos, i;\n    for (i = decPos = 0; i < nDecorations;) {\n      if (decorations[i] !== decorations[i + 2]) {\n        decorations[decPos++] = decorations[i++];\n        decorations[decPos++] = decorations[i++];\n      } else {\n        i += 2;\n      }\n    }\n    nDecorations = decPos;\n  \n    // Simplify decorations.\n    for (i = decPos = 0; i < nDecorations;) {\n      var startPos = decorations[i];\n      // Conflate all adjacent decorations that use the same style.\n      var startDec = decorations[i + 1];\n      var end = i + 2;\n      while (end + 2 <= nDecorations && decorations[end + 1] === startDec) {\n        end += 2;\n      }\n      decorations[decPos++] = startPos;\n      decorations[decPos++] = startDec;\n      i = end;\n    }\n  \n    nDecorations = decorations.length = decPos;\n  \n    var sourceNode = job.sourceNode;\n    var oldDisplay = \"\";\n    if (sourceNode) {\n      oldDisplay = sourceNode.style.display;\n      sourceNode.style.display = 'none';\n    }\n    try {\n      var decoration = null;\n      while (spanIndex < nSpans) {\n        var spanStart = spans[spanIndex];\n        var spanEnd = /** @type{number} */ (spans[spanIndex + 2])\n            || sourceLength;\n  \n        var decEnd = decorations[decorationIndex + 2] || sourceLength;\n  \n        var end = Math.min(spanEnd, decEnd);\n  \n        var textNode = /** @type{Node} */ (spans[spanIndex + 1]);\n        var styledText;\n        if (textNode.nodeType !== 1  // Don't muck with <BR>s or <LI>s\n            // Don't introduce spans around empty text nodes.\n            && (styledText = source.substring(sourceIndex, end))) {\n          // This may seem bizarre, and it is.  Emitting LF on IE causes the\n          // code to display with spaces instead of line breaks.\n          // Emitting Windows standard issue linebreaks (CRLF) causes a blank\n          // space to appear at the beginning of every line but the first.\n          // Emitting an old Mac OS 9 line separator makes everything spiffy.\n          if (isIE8OrEarlier) {\n            styledText = styledText.replace(newlineRe, '\\r');\n          }\n          textNode.nodeValue = styledText;\n          var document = textNode.ownerDocument;\n          var span = document.createElement('span');\n          span.className = decorations[decorationIndex + 1];\n          var parentNode = textNode.parentNode;\n          parentNode.replaceChild(span, textNode);\n          span.appendChild(textNode);\n          if (sourceIndex < spanEnd) {  // Split off a text node.\n            spans[spanIndex + 1] = textNode\n                // TODO: Possibly optimize by using '' if there's no flicker.\n                = document.createTextNode(source.substring(end, spanEnd));\n            parentNode.insertBefore(textNode, span.nextSibling);\n          }\n        }\n  \n        sourceIndex = end;\n  \n        if (sourceIndex >= spanEnd) {\n          spanIndex += 2;\n        }\n        if (sourceIndex >= decEnd) {\n          decorationIndex += 2;\n        }\n      }\n    } finally {\n      if (sourceNode) {\n        sourceNode.style.display = oldDisplay;\n      }\n    }\n  }\n\n  /** Maps language-specific file extensions to handlers. */\n  var langHandlerRegistry = {};\n  /** Register a language handler for the given file extensions.\n    * @param {function (JobT)} handler a function from source code to a list\n    *      of decorations.  Takes a single argument job which describes the\n    *      state of the computation and attaches the decorations to it.\n    * @param {Array.<string>} fileExtensions\n    */\n  function registerLangHandler(handler, fileExtensions) {\n    for (var i = fileExtensions.length; --i >= 0;) {\n      var ext = fileExtensions[i];\n      if (!langHandlerRegistry.hasOwnProperty(ext)) {\n        langHandlerRegistry[ext] = handler;\n      } else if (win['console']) {\n        console['warn']('cannot override language handler %s', ext);\n      }\n    }\n  }\n  function langHandlerForExtension(extension, source) {\n    if (!(extension && langHandlerRegistry.hasOwnProperty(extension))) {\n      // Treat it as markup if the first non whitespace character is a < and\n      // the last non-whitespace character is a >.\n      extension = /^\\s*</.test(source)\n          ? 'default-markup'\n          : 'default-code';\n    }\n    return langHandlerRegistry[extension];\n  }\n  registerLangHandler(decorateSource, ['default-code']);\n  registerLangHandler(\n      createSimpleLexer(\n          [],\n          [\n           [PR_PLAIN,       /^[^<?]+/],\n           [PR_DECLARATION, /^<!\\w[^>]*(?:>|$)/],\n           [PR_COMMENT,     /^<\\!--[\\s\\S]*?(?:-\\->|$)/],\n           // Unescaped content in an unknown language\n           ['lang-',        /^<\\?([\\s\\S]+?)(?:\\?>|$)/],\n           ['lang-',        /^<%([\\s\\S]+?)(?:%>|$)/],\n           [PR_PUNCTUATION, /^(?:<[%?]|[%?]>)/],\n           ['lang-',        /^<xmp\\b[^>]*>([\\s\\S]+?)<\\/xmp\\b[^>]*>/i],\n           // Unescaped content in javascript.  (Or possibly vbscript).\n           ['lang-js',      /^<script\\b[^>]*>([\\s\\S]*?)(<\\/script\\b[^>]*>)/i],\n           // Contains unescaped stylesheet content\n           ['lang-css',     /^<style\\b[^>]*>([\\s\\S]*?)(<\\/style\\b[^>]*>)/i],\n           ['lang-in.tag',  /^(<\\/?[a-z][^<>]*>)/i]\n          ]),\n      ['default-markup', 'htm', 'html', 'mxml', 'xhtml', 'xml', 'xsl']);\n  registerLangHandler(\n      createSimpleLexer(\n          [\n           [PR_PLAIN,        /^[\\s]+/, null, ' \\t\\r\\n'],\n           [PR_ATTRIB_VALUE, /^(?:\\\"[^\\\"]*\\\"?|\\'[^\\']*\\'?)/, null, '\\\"\\'']\n           ],\n          [\n           [PR_TAG,          /^^<\\/?[a-z](?:[\\w.:-]*\\w)?|\\/?>$/i],\n           [PR_ATTRIB_NAME,  /^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],\n           ['lang-uq.val',   /^=\\s*([^>\\'\\\"\\s]*(?:[^>\\'\\\"\\s\\/]|\\/(?=\\s)))/],\n           [PR_PUNCTUATION,  /^[=<>\\/]+/],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-js',       /^on\\w+\\s*=\\s*([^\\\"\\'>\\s]+)/i],\n           ['lang-css',      /^style\\s*=\\s*\\\"([^\\\"]+)\\\"/i],\n           ['lang-css',      /^style\\s*=\\s*\\'([^\\']+)\\'/i],\n           ['lang-css',      /^style\\s*=\\s*([^\\\"\\'>\\s]+)/i]\n           ]),\n      ['in.tag']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_ATTRIB_VALUE, /^[\\s\\S]+/]]), ['uq.val']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CPP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'types': C_TYPES\n        }), ['c', 'cc', 'cpp', 'cxx', 'cyc', 'm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': 'null,true,false'\n        }), ['json']);\n  registerLangHandler(sourceDecorator({\n          'keywords': CSHARP_KEYWORDS,\n          'hashComments': true,\n          'cStyleComments': true,\n          'verbatimStrings': true,\n          'types': C_TYPES\n        }), ['cs']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JAVA_KEYWORDS,\n          'cStyleComments': true\n        }), ['java']);\n  registerLangHandler(sourceDecorator({\n          'keywords': SH_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true\n        }), ['bash', 'bsh', 'csh', 'sh']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PYTHON_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'tripleQuotedStrings': true\n        }), ['cv', 'py', 'python']);\n  registerLangHandler(sourceDecorator({\n          'keywords': PERL_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': 2  // multiline regex literals\n        }), ['perl', 'pl', 'pm']);\n  registerLangHandler(sourceDecorator({\n          'keywords': RUBY_KEYWORDS,\n          'hashComments': true,\n          'multiLineStrings': true,\n          'regexLiterals': true\n        }), ['rb', 'ruby']);\n  registerLangHandler(sourceDecorator({\n          'keywords': JSCRIPT_KEYWORDS,\n          'cStyleComments': true,\n          'regexLiterals': true\n        }), ['javascript', 'js', 'ts', 'typescript']);\n  registerLangHandler(sourceDecorator({\n          'keywords': COFFEE_KEYWORDS,\n          'hashComments': 3,  // ### style block comments\n          'cStyleComments': true,\n          'multilineStrings': true,\n          'tripleQuotedStrings': true,\n          'regexLiterals': true\n        }), ['coffee']);\n  registerLangHandler(\n      createSimpleLexer([], [[PR_STRING, /^[\\s\\S]+/]]), ['regex']);\n\n  /** @param {JobT} job */\n  function applyDecorator(job) {\n    var opt_langExtension = job.langExtension;\n\n    try {\n      // Extract tags, and convert the source code to plain text.\n      var sourceAndSpans = extractSourceSpans(job.sourceNode, job.pre);\n      /** Plain text. @type {string} */\n      var source = sourceAndSpans.sourceCode;\n      job.sourceCode = source;\n      job.spans = sourceAndSpans.spans;\n      job.basePos = 0;\n\n      // Apply the appropriate language handler\n      langHandlerForExtension(opt_langExtension, source)(job);\n\n      // Integrate the decorations and tags back into the source code,\n      // modifying the sourceNode in place.\n      recombineTagsAndDecorations(job);\n    } catch (e) {\n      if (win['console']) {\n        console['log'](e && e['stack'] || e);\n      }\n    }\n  }\n\n  /**\n   * Pretty print a chunk of code.\n   * @param sourceCodeHtml {string} The HTML to pretty print.\n   * @param opt_langExtension {string} The language name to use.\n   *     Typically, a filename extension like 'cpp' or 'java'.\n   * @param opt_numberLines {number|boolean} True to number lines,\n   *     or the 1-indexed number of the first line in sourceCodeHtml.\n   */\n  function $prettyPrintOne(sourceCodeHtml, opt_langExtension, opt_numberLines) {\n    /** @type{number|boolean} */\n    var nl = opt_numberLines || false;\n    /** @type{string|null} */\n    var langExtension = opt_langExtension || null;\n    /** @type{!Element} */\n    var container = document.createElement('div');\n    // This could cause images to load and onload listeners to fire.\n    // E.g. <img onerror=\"alert(1337)\" src=\"nosuchimage.png\">.\n    // We assume that the inner HTML is from a trusted source.\n    // The pre-tag is required for IE8 which strips newlines from innerHTML\n    // when it is injected into a <pre> tag.\n    // http://stackoverflow.com/questions/451486/pre-tag-loses-line-breaks-when-setting-innerhtml-in-ie\n    // http://stackoverflow.com/questions/195363/inserting-a-newline-into-a-pre-tag-ie-javascript\n    container.innerHTML = '<pre>' + sourceCodeHtml + '</pre>';\n    container = /** @type{!Element} */(container.firstChild);\n    if (nl) {\n      numberLines(container, nl, true);\n    }\n\n    /** @type{JobT} */\n    var job = {\n      langExtension: langExtension,\n      numberLines: nl,\n      sourceNode: container,\n      pre: 1,\n      sourceCode: null,\n      basePos: null,\n      spans: null,\n      decorations: null\n    };\n    applyDecorator(job);\n    return container.innerHTML;\n  }\n\n   /**\n    * Find all the {@code <pre>} and {@code <code>} tags in the DOM with\n    * {@code class=prettyprint} and prettify them.\n    *\n    * @param {Function} opt_whenDone called when prettifying is done.\n    * @param {HTMLElement|HTMLDocument} opt_root an element or document\n    *   containing all the elements to pretty print.\n    *   Defaults to {@code document.body}.\n    */\n  function $prettyPrint(opt_whenDone, opt_root) {\n    var root = opt_root || document.body;\n    var doc = root.ownerDocument || document;\n    function byTagName(tn) { return root.getElementsByTagName(tn); }\n    // fetch a list of nodes to rewrite\n    var codeSegments = [byTagName('pre'), byTagName('code'), byTagName('xmp')];\n    var elements = [];\n    for (var i = 0; i < codeSegments.length; ++i) {\n      for (var j = 0, n = codeSegments[i].length; j < n; ++j) {\n        elements.push(codeSegments[i][j]);\n      }\n    }\n    codeSegments = null;\n\n    var clock = Date;\n    if (!clock['now']) {\n      clock = { 'now': function () { return +(new Date); } };\n    }\n\n    // The loop is broken into a series of continuations to make sure that we\n    // don't make the browser unresponsive when rewriting a large page.\n    var k = 0;\n\n    var langExtensionRe = /\\blang(?:uage)?-([\\w.]+)(?!\\S)/;\n    var prettyPrintRe = /\\bprettyprint\\b/;\n    var prettyPrintedRe = /\\bprettyprinted\\b/;\n    var preformattedTagNameRe = /pre|xmp/i;\n    var codeRe = /^code$/i;\n    var preCodeXmpRe = /^(?:pre|code|xmp)$/i;\n    var EMPTY = {};\n\n    function doWork() {\n      var endTime = (win['PR_SHOULD_USE_CONTINUATION'] ?\n                     clock['now']() + 250 /* ms */ :\n                     Infinity);\n      for (; k < elements.length && clock['now']() < endTime; k++) {\n        var cs = elements[k];\n\n        // Look for a preceding comment like\n        // <?prettify lang=\"...\" linenums=\"...\"?>\n        var attrs = EMPTY;\n        {\n          for (var preceder = cs; (preceder = preceder.previousSibling);) {\n            var nt = preceder.nodeType;\n            // <?foo?> is parsed by HTML 5 to a comment node (8)\n            // like <!--?foo?-->, but in XML is a processing instruction\n            var value = (nt === 7 || nt === 8) && preceder.nodeValue;\n            if (value\n                ? !/^\\??prettify\\b/.test(value)\n                : (nt !== 3 || /\\S/.test(preceder.nodeValue))) {\n              // Skip over white-space text nodes but not others.\n              break;\n            }\n            if (value) {\n              attrs = {};\n              value.replace(\n                  /\\b(\\w+)=([\\w:.%+-]+)/g,\n                function (_, name, value) { attrs[name] = value; });\n              break;\n            }\n          }\n        }\n\n        var className = cs.className;\n        if ((attrs !== EMPTY || prettyPrintRe.test(className))\n            // Don't redo this if we've already done it.\n            // This allows recalling pretty print to just prettyprint elements\n            // that have been added to the page since last call.\n            && !prettyPrintedRe.test(className)) {\n\n          // make sure this is not nested in an already prettified element\n          var nested = false;\n          for (var p = cs.parentNode; p; p = p.parentNode) {\n            var tn = p.tagName;\n            if (preCodeXmpRe.test(tn)\n                && p.className && prettyPrintRe.test(p.className)) {\n              nested = true;\n              break;\n            }\n          }\n          if (!nested) {\n            // Mark done.  If we fail to prettyprint for whatever reason,\n            // we shouldn't try again.\n            cs.className += ' prettyprinted';\n\n            // If the classes includes a language extensions, use it.\n            // Language extensions can be specified like\n            //     <pre class=\"prettyprint lang-cpp\">\n            // the language extension \"cpp\" is used to find a language handler\n            // as passed to PR.registerLangHandler.\n            // HTML5 recommends that a language be specified using \"language-\"\n            // as the prefix instead.  Google Code Prettify supports both.\n            // http://dev.w3.org/html5/spec-author-view/the-code-element.html\n            var langExtension = attrs['lang'];\n            if (!langExtension) {\n              langExtension = className.match(langExtensionRe);\n              // Support <pre class=\"prettyprint\"><code class=\"language-c\">\n              var wrapper;\n              if (!langExtension && (wrapper = childContentWrapper(cs))\n                  && codeRe.test(wrapper.tagName)) {\n                langExtension = wrapper.className.match(langExtensionRe);\n              }\n\n              if (langExtension) { langExtension = langExtension[1]; }\n            }\n\n            var preformatted;\n            if (preformattedTagNameRe.test(cs.tagName)) {\n              preformatted = 1;\n            } else {\n              var currentStyle = cs['currentStyle'];\n              var defaultView = doc.defaultView;\n              var whitespace = (\n                  currentStyle\n                  ? currentStyle['whiteSpace']\n                  : (defaultView\n                     && defaultView.getComputedStyle)\n                  ? defaultView.getComputedStyle(cs, null)\n                  .getPropertyValue('white-space')\n                  : 0);\n              preformatted = whitespace\n                  && 'pre' === whitespace.substring(0, 3);\n            }\n\n            // Look for a class like linenums or linenums:<n> where <n> is the\n            // 1-indexed number of the first line.\n            var lineNums = attrs['linenums'];\n            if (!(lineNums = lineNums === 'true' || +lineNums)) {\n              lineNums = className.match(/\\blinenums\\b(?::(\\d+))?/);\n              lineNums =\n                lineNums\n                ? lineNums[1] && lineNums[1].length\n                  ? +lineNums[1] : true\n                : false;\n            }\n            if (lineNums) { numberLines(cs, lineNums, preformatted); }\n\n            // do the pretty printing\n            var prettyPrintingJob = {\n              langExtension: langExtension,\n              sourceNode: cs,\n              numberLines: lineNums,\n              pre: preformatted,\n              sourceCode: null,\n              basePos: null,\n              spans: null,\n              decorations: null\n            };\n            applyDecorator(prettyPrintingJob);\n          }\n        }\n      }\n      if (k < elements.length) {\n        // finish up in a continuation\n        win.setTimeout(doWork, 250);\n      } else if ('function' === typeof opt_whenDone) {\n        opt_whenDone();\n      }\n    }\n\n    doWork();\n  }\n\n  /**\n   * Contains functions for creating and registering new language handlers.\n   * @type {Object}\n   */\n  var PR = win['PR'] = {\n        'createSimpleLexer': createSimpleLexer,\n        'registerLangHandler': registerLangHandler,\n        'sourceDecorator': sourceDecorator,\n        'PR_ATTRIB_NAME': PR_ATTRIB_NAME,\n        'PR_ATTRIB_VALUE': PR_ATTRIB_VALUE,\n        'PR_COMMENT': PR_COMMENT,\n        'PR_DECLARATION': PR_DECLARATION,\n        'PR_KEYWORD': PR_KEYWORD,\n        'PR_LITERAL': PR_LITERAL,\n        'PR_NOCODE': PR_NOCODE,\n        'PR_PLAIN': PR_PLAIN,\n        'PR_PUNCTUATION': PR_PUNCTUATION,\n        'PR_SOURCE': PR_SOURCE,\n        'PR_STRING': PR_STRING,\n        'PR_TAG': PR_TAG,\n        'PR_TYPE': PR_TYPE,\n        'prettyPrintOne':\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrintOne'] = $prettyPrintOne)\n             : (prettyPrintOne = $prettyPrintOne),\n        'prettyPrint': prettyPrint =\n           IN_GLOBAL_SCOPE\n             ? (win['prettyPrint'] = $prettyPrint)\n             : (prettyPrint = $prettyPrint)\n      };\n\n  // Make PR available via the Asynchronous Module Definition (AMD) API.\n  // Per https://github.com/amdjs/amdjs-api/wiki/AMD:\n  // The Asynchronous Module Definition (AMD) API specifies a\n  // mechanism for defining modules such that the module and its\n  // dependencies can be asynchronously loaded.\n  // ...\n  // To allow a clear indicator that a global define function (as\n  // needed for script src browser loading) conforms to the AMD API,\n  // any global define function SHOULD have a property called \"amd\"\n  // whose value is an object. This helps avoid conflict with any\n  // other existing JavaScript code that could have defined a define()\n  // function that does not conform to the AMD API.\n  var define = win['define'];\n  if (typeof define === \"function\" && define['amd']) {\n    define(\"google-code-prettify\", [], function () {\n      return PR;\n    });\n  }\n})();\n"],"sourceRoot":""}